/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDefClasse> copy = new ArrayList<PDefClasse>(node.getDefClasse());
            Collections.reverse(copy);
            for(PDefClasse e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PFamilia> copy = new ArrayList<PFamilia>(node.getFamilia());
            Collections.reverse(copy);
            for(PFamilia e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inANotEmptyFamilia(ANotEmptyFamilia node)
    {
        defaultIn(node);
    }

    public void outANotEmptyFamilia(ANotEmptyFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEmptyFamilia(ANotEmptyFamilia node)
    {
        inANotEmptyFamilia(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        {
            List<PListaRelacoes> copy = new ArrayList<PListaRelacoes>(node.getListaRelacoes());
            Collections.reverse(copy);
            for(PListaRelacoes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outANotEmptyFamilia(node);
    }

    public void inARelacoesListaRelacoes(ARelacoesListaRelacoes node)
    {
        defaultIn(node);
    }

    public void outARelacoesListaRelacoes(ARelacoesListaRelacoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacoesListaRelacoes(ARelacoesListaRelacoes node)
    {
        inARelacoesListaRelacoes(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        if(node.getRelacaoSymbol() != null)
        {
            node.getRelacaoSymbol().apply(this);
        }
        outARelacoesListaRelacoes(node);
    }

    public void inARelacao(ARelacao node)
    {
        defaultIn(node);
    }

    public void outARelacao(ARelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacao(ARelacao node)
    {
        inARelacao(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getHeranca() != null)
        {
            node.getHeranca().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outARelacao(node);
    }

    public void inADefClasse(ADefClasse node)
    {
        defaultIn(node);
    }

    public void outADefClasse(ADefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefClasse(ADefClasse node)
    {
        inADefClasse(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getMetodos() != null)
        {
            node.getMetodos().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outADefClasse(node);
    }

    public void inADecObjAtributos(ADecObjAtributos node)
    {
        defaultIn(node);
    }

    public void outADecObjAtributos(ADecObjAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjAtributos(ADecObjAtributos node)
    {
        inADecObjAtributos(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjAtributos(node);
    }

    public void inADecVarAtributos(ADecVarAtributos node)
    {
        defaultIn(node);
    }

    public void outADecVarAtributos(ADecVarAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarAtributos(ADecVarAtributos node)
    {
        inADecVarAtributos(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarAtributos(node);
    }

    public void inADecConstAtributos(ADecConstAtributos node)
    {
        defaultIn(node);
    }

    public void outADecConstAtributos(ADecConstAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstAtributos(ADecConstAtributos node)
    {
        inADecConstAtributos(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outADecConstAtributos(node);
    }

    public void inADecProcedimentoMetodos(ADecProcedimentoMetodos node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoMetodos(ADecProcedimentoMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoMetodos(ADecProcedimentoMetodos node)
    {
        inADecProcedimentoMetodos(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcedimentoMetodos(node);
    }

    public void inADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        inADecFuncaoMetodos(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoMetodos(node);
    }

    public void inAObjDecObj(AObjDecObj node)
    {
        defaultIn(node);
    }

    public void outAObjDecObj(AObjDecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjDecObj(AObjDecObj node)
    {
        inAObjDecObj(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        if(node.getObjeto() != null)
        {
            node.getObjeto().apply(this);
        }
        outAObjDecObj(node);
    }

    public void inAVarDecVar(AVarDecVar node)
    {
        defaultIn(node);
    }

    public void outAVarDecVar(AVarDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecVar(AVarDecVar node)
    {
        inAVarDecVar(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarDecVar(node);
    }

    public void inAConstDecConst(AConstDecConst node)
    {
        defaultIn(node);
    }

    public void outAConstDecConst(AConstDecConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDecConst(AConstDecConst node)
    {
        inAConstDecConst(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outAConstDecConst(node);
    }

    public void inAInitInicializacao(AInitInicializacao node)
    {
        defaultIn(node);
    }

    public void outAInitInicializacao(AInitInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitInicializacao(AInitInicializacao node)
    {
        inAInitInicializacao(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAInitInicializacao(node);
    }

    public void inATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipo(ATipoClasseTipo node)
    {
        inATipoClasseTipo(node);
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        outATipoClasseTipo(node);
    }

    public void inATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        inATipoPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimitivoTipo(node);
    }

    public void inAClasseTipoClasse(AClasseTipoClasse node)
    {
        defaultIn(node);
    }

    public void outAClasseTipoClasse(AClasseTipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasseTipoClasse(AClasseTipoClasse node)
    {
        inAClasseTipoClasse(node);
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outAClasseTipoClasse(node);
    }

    public void inARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        inARealTipoPrimitivo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outARealTipoPrimitivo(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getTipoBool() != null)
        {
            node.getTipoBool().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inAProcedCompletoDecProcedimento(AProcedCompletoDecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAProcedCompletoDecProcedimento(AProcedCompletoDecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedCompletoDecProcedimento(AProcedCompletoDecProcedimento node)
    {
        inAProcedCompletoDecProcedimento(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        {
            List<TInicioProced> copy = new ArrayList<TInicioProced>(node.getInicioProced());
            Collections.reverse(copy);
            for(TInicioProced e : copy)
            {
                e.apply(this);
            }
        }
        outAProcedCompletoDecProcedimento(node);
    }

    public void inAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node)
    {
        inAProcedimentoDecProcedimento(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        outAProcedimentoDecProcedimento(node);
    }

    public void inAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node)
    {
        inAFuncaoCompletaDecFuncao(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outAFuncaoCompletaDecFuncao(node);
    }

    public void inAFuncaoDecFuncao(AFuncaoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDecFuncao(AFuncaoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDecFuncao(AFuncaoDecFuncao node)
    {
        inAFuncaoDecFuncao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outAFuncaoDecFuncao(node);
    }

    public void inAParamsParametros(AParamsParametros node)
    {
        defaultIn(node);
    }

    public void outAParamsParametros(AParamsParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamsParametros(AParamsParametros node)
    {
        inAParamsParametros(node);
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getParametro());
            Collections.reverse(copy);
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAParamsParametros(node);
    }

    public void inAListaListParam(AListaListParam node)
    {
        defaultIn(node);
    }

    public void outAListaListParam(AListaListParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListParam(AListaListParam node)
    {
        inAListaListParam(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        outAListaListParam(node);
    }

    public void inAParamParametro(AParamParametro node)
    {
        defaultIn(node);
    }

    public void outAParamParametro(AParamParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParametro(AParamParametro node)
    {
        inAParamParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParamParametro(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComando(node);
    }

    public void inASeSenaoComando(ASeSenaoComando node)
    {
        defaultIn(node);
    }

    public void outASeSenaoComando(ASeSenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoComando(ASeSenaoComando node)
    {
        inASeSenaoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComandoDois() != null)
        {
            node.getComandoDois().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSenaoComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAAtbrComando(AAtbrComando node)
    {
        defaultIn(node);
    }

    public void outAAtbrComando(AAtbrComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtbrComando(AAtbrComando node)
    {
        inAAtbrComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAtbrComando(node);
    }

    public void inAChamadaMetdComando(AChamadaMetdComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaMetdComando(AChamadaMetdComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaMetdComando(AChamadaMetdComando node)
    {
        inAChamadaMetdComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaMetdComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inASeSenaoComandoDois(ASeSenaoComandoDois node)
    {
        defaultIn(node);
    }

    public void outASeSenaoComandoDois(ASeSenaoComandoDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoComandoDois(ASeSenaoComandoDois node)
    {
        inASeSenaoComandoDois(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSenaoComandoDois(node);
    }

    public void inABlocoComandoDois(ABlocoComandoDois node)
    {
        defaultIn(node);
    }

    public void outABlocoComandoDois(ABlocoComandoDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandoDois(ABlocoComandoDois node)
    {
        inABlocoComandoDois(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComandoDois(node);
    }

    public void inAIniciarBlocoBloco(AIniciarBlocoBloco node)
    {
        defaultIn(node);
    }

    public void outAIniciarBlocoBloco(AIniciarBlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIniciarBlocoBloco(AIniciarBlocoBloco node)
    {
        inAIniciarBlocoBloco(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTipoDecl> copy = new ArrayList<PTipoDecl>(node.getTipoDecl());
            Collections.reverse(copy);
            for(PTipoDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outAIniciarBlocoBloco(node);
    }

    public void inADecObjTipoDecl(ADecObjTipoDecl node)
    {
        defaultIn(node);
    }

    public void outADecObjTipoDecl(ADecObjTipoDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjTipoDecl(ADecObjTipoDecl node)
    {
        inADecObjTipoDecl(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjTipoDecl(node);
    }

    public void inADecVarTipoDecl(ADecVarTipoDecl node)
    {
        defaultIn(node);
    }

    public void outADecVarTipoDecl(ADecVarTipoDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarTipoDecl(ADecVarTipoDecl node)
    {
        inADecVarTipoDecl(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarTipoDecl(node);
    }

    public void inADecConstTipoDecl(ADecConstTipoDecl node)
    {
        defaultIn(node);
    }

    public void outADecConstTipoDecl(ADecConstTipoDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstTipoDecl(ADecConstTipoDecl node)
    {
        inADecConstTipoDecl(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outADecConstTipoDecl(node);
    }

    public void inAExprNivelUmExpr(AExprNivelUmExpr node)
    {
        defaultIn(node);
    }

    public void outAExprNivelUmExpr(AExprNivelUmExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelUmExpr(AExprNivelUmExpr node)
    {
        inAExprNivelUmExpr(node);
        if(node.getExprNivelUm() != null)
        {
            node.getExprNivelUm().apply(this);
        }
        outAExprNivelUmExpr(node);
    }

    public void inABlocoExprExpr(ABlocoExprExpr node)
    {
        defaultIn(node);
    }

    public void outABlocoExprExpr(ABlocoExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExprExpr(ABlocoExprExpr node)
    {
        inABlocoExprExpr(node);
        if(node.getBlocoExp() != null)
        {
            node.getBlocoExp().apply(this);
        }
        outABlocoExprExpr(node);
    }

    public void inAExprNivelDoisExprNivelUm(AExprNivelDoisExprNivelUm node)
    {
        defaultIn(node);
    }

    public void outAExprNivelDoisExprNivelUm(AExprNivelDoisExprNivelUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelDoisExprNivelUm(AExprNivelDoisExprNivelUm node)
    {
        inAExprNivelDoisExprNivelUm(node);
        if(node.getExprNivelDois() != null)
        {
            node.getExprNivelDois().apply(this);
        }
        outAExprNivelDoisExprNivelUm(node);
    }

    public void inAELogicoExprNivelUm(AELogicoExprNivelUm node)
    {
        defaultIn(node);
    }

    public void outAELogicoExprNivelUm(AELogicoExprNivelUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAELogicoExprNivelUm(AELogicoExprNivelUm node)
    {
        inAELogicoExprNivelUm(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getELogico() != null)
        {
            node.getELogico().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAELogicoExprNivelUm(node);
    }

    public void inAOuLogicoExprNivelUm(AOuLogicoExprNivelUm node)
    {
        defaultIn(node);
    }

    public void outAOuLogicoExprNivelUm(AOuLogicoExprNivelUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuLogicoExprNivelUm(AOuLogicoExprNivelUm node)
    {
        inAOuLogicoExprNivelUm(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getOuLogico() != null)
        {
            node.getOuLogico().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAOuLogicoExprNivelUm(node);
    }

    public void inAExprNivelTresExprNivelDois(AExprNivelTresExprNivelDois node)
    {
        defaultIn(node);
    }

    public void outAExprNivelTresExprNivelDois(AExprNivelTresExprNivelDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelTresExprNivelDois(AExprNivelTresExprNivelDois node)
    {
        inAExprNivelTresExprNivelDois(node);
        if(node.getExprNivelTres() != null)
        {
            node.getExprNivelTres().apply(this);
        }
        outAExprNivelTresExprNivelDois(node);
    }

    public void inAIgualExprNivelDois(AIgualExprNivelDois node)
    {
        defaultIn(node);
    }

    public void outAIgualExprNivelDois(AIgualExprNivelDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExprNivelDois(AIgualExprNivelDois node)
    {
        inAIgualExprNivelDois(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAIgualExprNivelDois(node);
    }

    public void inAExprNivelQuatroExprNivelTres(AExprNivelQuatroExprNivelTres node)
    {
        defaultIn(node);
    }

    public void outAExprNivelQuatroExprNivelTres(AExprNivelQuatroExprNivelTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelQuatroExprNivelTres(AExprNivelQuatroExprNivelTres node)
    {
        inAExprNivelQuatroExprNivelTres(node);
        if(node.getExprNivelQuatro() != null)
        {
            node.getExprNivelQuatro().apply(this);
        }
        outAExprNivelQuatroExprNivelTres(node);
    }

    public void inAMenorExprNivelTres(AMenorExprNivelTres node)
    {
        defaultIn(node);
    }

    public void outAMenorExprNivelTres(AMenorExprNivelTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExprNivelTres(AMenorExprNivelTres node)
    {
        inAMenorExprNivelTres(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAMenorExprNivelTres(node);
    }

    public void inAMenorIgualExprNivelTres(AMenorIgualExprNivelTres node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExprNivelTres(AMenorIgualExprNivelTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExprNivelTres(AMenorIgualExprNivelTres node)
    {
        inAMenorIgualExprNivelTres(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAMenorIgualExprNivelTres(node);
    }

    public void inAExprNivelCincoExprNivelQuatro(AExprNivelCincoExprNivelQuatro node)
    {
        defaultIn(node);
    }

    public void outAExprNivelCincoExprNivelQuatro(AExprNivelCincoExprNivelQuatro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelCincoExprNivelQuatro(AExprNivelCincoExprNivelQuatro node)
    {
        inAExprNivelCincoExprNivelQuatro(node);
        if(node.getExprNivelCinco() != null)
        {
            node.getExprNivelCinco().apply(this);
        }
        outAExprNivelCincoExprNivelQuatro(node);
    }

    public void inASomaExprNivelQuatro(ASomaExprNivelQuatro node)
    {
        defaultIn(node);
    }

    public void outASomaExprNivelQuatro(ASomaExprNivelQuatro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExprNivelQuatro(ASomaExprNivelQuatro node)
    {
        inASomaExprNivelQuatro(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outASomaExprNivelQuatro(node);
    }

    public void inAMenosExprNivelQuatro(AMenosExprNivelQuatro node)
    {
        defaultIn(node);
    }

    public void outAMenosExprNivelQuatro(AMenosExprNivelQuatro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExprNivelQuatro(AMenosExprNivelQuatro node)
    {
        inAMenosExprNivelQuatro(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAMenosExprNivelQuatro(node);
    }

    public void inAExprNivelSeisExprNivelCinco(AExprNivelSeisExprNivelCinco node)
    {
        defaultIn(node);
    }

    public void outAExprNivelSeisExprNivelCinco(AExprNivelSeisExprNivelCinco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelSeisExprNivelCinco(AExprNivelSeisExprNivelCinco node)
    {
        inAExprNivelSeisExprNivelCinco(node);
        if(node.getExprNivelSeis() != null)
        {
            node.getExprNivelSeis().apply(this);
        }
        outAExprNivelSeisExprNivelCinco(node);
    }

    public void inANegacaoExprNivelCinco(ANegacaoExprNivelCinco node)
    {
        defaultIn(node);
    }

    public void outANegacaoExprNivelCinco(ANegacaoExprNivelCinco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoExprNivelCinco(ANegacaoExprNivelCinco node)
    {
        inANegacaoExprNivelCinco(node);
        if(node.getExprNivelSeis() != null)
        {
            node.getExprNivelSeis().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outANegacaoExprNivelCinco(node);
    }

    public void inAExprNivelSeteExprNivelSeis(AExprNivelSeteExprNivelSeis node)
    {
        defaultIn(node);
    }

    public void outAExprNivelSeteExprNivelSeis(AExprNivelSeteExprNivelSeis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelSeteExprNivelSeis(AExprNivelSeteExprNivelSeis node)
    {
        inAExprNivelSeteExprNivelSeis(node);
        if(node.getExprNivelSete() != null)
        {
            node.getExprNivelSete().apply(this);
        }
        outAExprNivelSeteExprNivelSeis(node);
    }

    public void inAModExprNivelSeis(AModExprNivelSeis node)
    {
        defaultIn(node);
    }

    public void outAModExprNivelSeis(AModExprNivelSeis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExprNivelSeis(AModExprNivelSeis node)
    {
        inAModExprNivelSeis(node);
        if(node.getExprNivelSete() != null)
        {
            node.getExprNivelSete().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExprNivelSeis() != null)
        {
            node.getExprNivelSeis().apply(this);
        }
        outAModExprNivelSeis(node);
    }

    public void inAExprNivelOitoExprNivelSete(AExprNivelOitoExprNivelSete node)
    {
        defaultIn(node);
    }

    public void outAExprNivelOitoExprNivelSete(AExprNivelOitoExprNivelSete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNivelOitoExprNivelSete(AExprNivelOitoExprNivelSete node)
    {
        inAExprNivelOitoExprNivelSete(node);
        if(node.getExprNivelOito() != null)
        {
            node.getExprNivelOito().apply(this);
        }
        outAExprNivelOitoExprNivelSete(node);
    }

    public void inAMultExprNivelSete(AMultExprNivelSete node)
    {
        defaultIn(node);
    }

    public void outAMultExprNivelSete(AMultExprNivelSete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExprNivelSete(AMultExprNivelSete node)
    {
        inAMultExprNivelSete(node);
        if(node.getExprNivelOito() != null)
        {
            node.getExprNivelOito().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExprNivelSete() != null)
        {
            node.getExprNivelSete().apply(this);
        }
        outAMultExprNivelSete(node);
    }

    public void inADivExprNivelSete(ADivExprNivelSete node)
    {
        defaultIn(node);
    }

    public void outADivExprNivelSete(ADivExprNivelSete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExprNivelSete(ADivExprNivelSete node)
    {
        inADivExprNivelSete(node);
        if(node.getExprNivelOito() != null)
        {
            node.getExprNivelOito().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExprNivelSete() != null)
        {
            node.getExprNivelSete().apply(this);
        }
        outADivExprNivelSete(node);
    }

    public void inAIdentifierExprNivelOito(AIdentifierExprNivelOito node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExprNivelOito(AIdentifierExprNivelOito node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExprNivelOito(AIdentifierExprNivelOito node)
    {
        inAIdentifierExprNivelOito(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExprNivelOito(node);
    }

    public void inANRealExprNivelOito(ANRealExprNivelOito node)
    {
        defaultIn(node);
    }

    public void outANRealExprNivelOito(ANRealExprNivelOito node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealExprNivelOito(ANRealExprNivelOito node)
    {
        inANRealExprNivelOito(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANRealExprNivelOito(node);
    }

    public void inAChamadaMetdExprNivelOito(AChamadaMetdExprNivelOito node)
    {
        defaultIn(node);
    }

    public void outAChamadaMetdExprNivelOito(AChamadaMetdExprNivelOito node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaMetdExprNivelOito(AChamadaMetdExprNivelOito node)
    {
        inAChamadaMetdExprNivelOito(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaMetdExprNivelOito(node);
    }

    public void inAChamadaAtributoExprNivelOito(AChamadaAtributoExprNivelOito node)
    {
        defaultIn(node);
    }

    public void outAChamadaAtributoExprNivelOito(AChamadaAtributoExprNivelOito node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaAtributoExprNivelOito(AChamadaAtributoExprNivelOito node)
    {
        inAChamadaAtributoExprNivelOito(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaAtributoExprNivelOito(node);
    }

    public void inAVerdadeExprNivelOito(AVerdadeExprNivelOito node)
    {
        defaultIn(node);
    }

    public void outAVerdadeExprNivelOito(AVerdadeExprNivelOito node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerdadeExprNivelOito(AVerdadeExprNivelOito node)
    {
        inAVerdadeExprNivelOito(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outAVerdadeExprNivelOito(node);
    }

    public void inAFalsoExprNivelOito(AFalsoExprNivelOito node)
    {
        defaultIn(node);
    }

    public void outAFalsoExprNivelOito(AFalsoExprNivelOito node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsoExprNivelOito(AFalsoExprNivelOito node)
    {
        inAFalsoExprNivelOito(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAFalsoExprNivelOito(node);
    }

    public void inAParExprNivelOito(AParExprNivelOito node)
    {
        defaultIn(node);
    }

    public void outAParExprNivelOito(AParExprNivelOito node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExprNivelOito(AParExprNivelOito node)
    {
        inAParExprNivelOito(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAParExprNivelOito(node);
    }

    public void inABlocoBlocoExp(ABlocoBlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoBlocoExp(ABlocoBlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBlocoExp(ABlocoBlocoExp node)
    {
        inABlocoBlocoExp(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PDecConst> copy = new ArrayList<PDecConst>(node.getDecConst());
            Collections.reverse(copy);
            for(PDecConst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outABlocoBlocoExp(node);
    }

    public void inAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        inAChamadaMetodoChamada(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        {
            List<PListaExpr> copy = new ArrayList<PListaExpr>(node.getListaExpr());
            Collections.reverse(copy);
            for(PListaExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaMetodoChamada(node);
    }

    public void inAIdAtributo(AIdAtributo node)
    {
        defaultIn(node);
    }

    public void outAIdAtributo(AIdAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtributo(AIdAtributo node)
    {
        inAIdAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAtributo(node);
    }

    public void inAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        inAExpressoesListaExpr(node);
        {
            List<PExprs> copy = new ArrayList<PExprs>(node.getExprs());
            Collections.reverse(copy);
            for(PExprs e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpressoesListaExpr(node);
    }

    public void inAListaExprs(AListaExprs node)
    {
        defaultIn(node);
    }

    public void outAListaExprs(AListaExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExprs(AListaExprs node)
    {
        inAListaExprs(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        outAListaExprs(node);
    }
}

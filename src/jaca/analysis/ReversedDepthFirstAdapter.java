/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAPrograma().apply(this);
        outStart(node);
    }

    public void inAAPrograma(AAPrograma node)
    {
        defaultIn(node);
    }

    public void outAAPrograma(AAPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPrograma(AAPrograma node)
    {
        inAAPrograma(node);
        {
            List<PADefClasse> copy = new ArrayList<PADefClasse>(node.getADefClasse());
            Collections.reverse(copy);
            for(PADefClasse e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAFamilia() != null)
        {
            node.getAFamilia().apply(this);
        }
        outAAPrograma(node);
    }

    public void inAANotEmptyAFamilia(AANotEmptyAFamilia node)
    {
        defaultIn(node);
    }

    public void outAANotEmptyAFamilia(AANotEmptyAFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANotEmptyAFamilia(AANotEmptyAFamilia node)
    {
        inAANotEmptyAFamilia(node);
        {
            List<PAListaRelacoes> copy = new ArrayList<PAListaRelacoes>(node.getAListaRelacoes());
            Collections.reverse(copy);
            for(PAListaRelacoes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getARelacao() != null)
        {
            node.getARelacao().apply(this);
        }
        outAANotEmptyAFamilia(node);
    }

    public void inAARelacoesAListaRelacoes(AARelacoesAListaRelacoes node)
    {
        defaultIn(node);
    }

    public void outAARelacoesAListaRelacoes(AARelacoesAListaRelacoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAARelacoesAListaRelacoes(AARelacoesAListaRelacoes node)
    {
        inAARelacoesAListaRelacoes(node);
        if(node.getARelacao() != null)
        {
            node.getARelacao().apply(this);
        }
        outAARelacoesAListaRelacoes(node);
    }

    public void inAARelARelacao(AARelARelacao node)
    {
        defaultIn(node);
    }

    public void outAARelARelacao(AARelARelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAARelARelacao(AARelARelacao node)
    {
        inAARelARelacao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAARelARelacao(node);
    }

    public void inAADefiniADefClasse(AADefiniADefClasse node)
    {
        defaultIn(node);
    }

    public void outAADefiniADefClasse(AADefiniADefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADefiniADefClasse(AADefiniADefClasse node)
    {
        inAADefiniADefClasse(node);
        {
            List<PAMetodos> copy = new ArrayList<PAMetodos>(node.getAMetodos());
            Collections.reverse(copy);
            for(PAMetodos e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAAtributos> copy = new ArrayList<PAAtributos>(node.getAAtributos());
            Collections.reverse(copy);
            for(PAAtributos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outAADefiniADefClasse(node);
    }

    public void inAAProcFuncAMetodos(AAProcFuncAMetodos node)
    {
        defaultIn(node);
    }

    public void outAAProcFuncAMetodos(AAProcFuncAMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProcFuncAMetodos(AAProcFuncAMetodos node)
    {
        inAAProcFuncAMetodos(node);
        {
            List<PAProcFunc> copy = new ArrayList<PAProcFunc>(node.getAProcFunc());
            Collections.reverse(copy);
            for(PAProcFunc e : copy)
            {
                e.apply(this);
            }
        }
        outAAProcFuncAMetodos(node);
    }

    public void inAADecProcedimentoAProcFunc(AADecProcedimentoAProcFunc node)
    {
        defaultIn(node);
    }

    public void outAADecProcedimentoAProcFunc(AADecProcedimentoAProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADecProcedimentoAProcFunc(AADecProcedimentoAProcFunc node)
    {
        inAADecProcedimentoAProcFunc(node);
        if(node.getADecProcedimento() != null)
        {
            node.getADecProcedimento().apply(this);
        }
        outAADecProcedimentoAProcFunc(node);
    }

    public void inAADecFuncaoAProcFunc(AADecFuncaoAProcFunc node)
    {
        defaultIn(node);
    }

    public void outAADecFuncaoAProcFunc(AADecFuncaoAProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADecFuncaoAProcFunc(AADecFuncaoAProcFunc node)
    {
        inAADecFuncaoAProcFunc(node);
        if(node.getADecFuncao() != null)
        {
            node.getADecFuncao().apply(this);
        }
        outAADecFuncaoAProcFunc(node);
    }

    public void inAAObjADecObj(AAObjADecObj node)
    {
        defaultIn(node);
    }

    public void outAAObjADecObj(AAObjADecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAObjADecObj(AAObjADecObj node)
    {
        inAAObjADecObj(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipoClasse() != null)
        {
            node.getATipoClasse().apply(this);
        }
        outAAObjADecObj(node);
    }

    public void inAAObjReservadoADecObj(AAObjReservadoADecObj node)
    {
        defaultIn(node);
    }

    public void outAAObjReservadoADecObj(AAObjReservadoADecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAObjReservadoADecObj(AAObjReservadoADecObj node)
    {
        inAAObjReservadoADecObj(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getClasseReservada() != null)
        {
            node.getClasseReservada().apply(this);
        }
        outAAObjReservadoADecObj(node);
    }

    public void inAAVarADecVar(AAVarADecVar node)
    {
        defaultIn(node);
    }

    public void outAAVarADecVar(AAVarADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVarADecVar(AAVarADecVar node)
    {
        inAAVarADecVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipoPrimitivo() != null)
        {
            node.getATipoPrimitivo().apply(this);
        }
        outAAVarADecVar(node);
    }

    public void inAAConstADecConst(AAConstADecConst node)
    {
        defaultIn(node);
    }

    public void outAAConstADecConst(AAConstADecConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAConstADecConst(AAConstADecConst node)
    {
        inAAConstADecConst(node);
        if(node.getATipoPrimitivo() != null)
        {
            node.getATipoPrimitivo().apply(this);
        }
        outAAConstADecConst(node);
    }

    public void inAAInitAInicializacao(AAInitAInicializacao node)
    {
        defaultIn(node);
    }

    public void outAAInitAInicializacao(AAInitAInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAInitAInicializacao(AAInitAInicializacao node)
    {
        inAAInitAInicializacao(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAInitAInicializacao(node);
    }

    public void inAATipoClasseATipo(AATipoClasseATipo node)
    {
        defaultIn(node);
    }

    public void outAATipoClasseATipo(AATipoClasseATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATipoClasseATipo(AATipoClasseATipo node)
    {
        inAATipoClasseATipo(node);
        if(node.getATipoClasse() != null)
        {
            node.getATipoClasse().apply(this);
        }
        outAATipoClasseATipo(node);
    }

    public void inAATipoPrimitivoATipo(AATipoPrimitivoATipo node)
    {
        defaultIn(node);
    }

    public void outAATipoPrimitivoATipo(AATipoPrimitivoATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATipoPrimitivoATipo(AATipoPrimitivoATipo node)
    {
        inAATipoPrimitivoATipo(node);
        if(node.getATipoPrimitivo() != null)
        {
            node.getATipoPrimitivo().apply(this);
        }
        outAATipoPrimitivoATipo(node);
    }

    public void inAAClasseATipoClasse(AAClasseATipoClasse node)
    {
        defaultIn(node);
    }

    public void outAAClasseATipoClasse(AAClasseATipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAClasseATipoClasse(AAClasseATipoClasse node)
    {
        inAAClasseATipoClasse(node);
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outAAClasseATipoClasse(node);
    }

    public void inAARealATipoPrimitivo(AARealATipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outAARealATipoPrimitivo(AARealATipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAARealATipoPrimitivo(AARealATipoPrimitivo node)
    {
        inAARealATipoPrimitivo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outAARealATipoPrimitivo(node);
    }

    public void inAABoolATipoPrimitivo(AABoolATipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outAABoolATipoPrimitivo(AABoolATipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABoolATipoPrimitivo(AABoolATipoPrimitivo node)
    {
        inAABoolATipoPrimitivo(node);
        if(node.getTipoBool() != null)
        {
            node.getTipoBool().apply(this);
        }
        outAABoolATipoPrimitivo(node);
    }

    public void inAAProcedCompletoADecProcedimento(AAProcedCompletoADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAAProcedCompletoADecProcedimento(AAProcedCompletoADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProcedCompletoADecProcedimento(AAProcedCompletoADecProcedimento node)
    {
        inAAProcedCompletoADecProcedimento(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAProcedCompletoADecProcedimento(node);
    }

    public void inAAProcedimentoADecProcedimento(AAProcedimentoADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAAProcedimentoADecProcedimento(AAProcedimentoADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProcedimentoADecProcedimento(AAProcedimentoADecProcedimento node)
    {
        inAAProcedimentoADecProcedimento(node);
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAProcedimentoADecProcedimento(node);
    }

    public void inAAFuncaoCompletaADecFuncao(AAFuncaoCompletaADecFuncao node)
    {
        defaultIn(node);
    }

    public void outAAFuncaoCompletaADecFuncao(AAFuncaoCompletaADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFuncaoCompletaADecFuncao(AAFuncaoCompletaADecFuncao node)
    {
        inAAFuncaoCompletaADecFuncao(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAAFuncaoCompletaADecFuncao(node);
    }

    public void inAAFuncaoADecFuncao(AAFuncaoADecFuncao node)
    {
        defaultIn(node);
    }

    public void outAAFuncaoADecFuncao(AAFuncaoADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFuncaoADecFuncao(AAFuncaoADecFuncao node)
    {
        inAAFuncaoADecFuncao(node);
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAAFuncaoADecFuncao(node);
    }

    public void inAAParamsAParametros(AAParamsAParametros node)
    {
        defaultIn(node);
    }

    public void outAAParamsAParametros(AAParamsAParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParamsAParametros(AAParamsAParametros node)
    {
        inAAParamsAParametros(node);
        {
            List<PAParams> copy = new ArrayList<PAParams>(node.getAParams());
            Collections.reverse(copy);
            for(PAParams e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAParametro() != null)
        {
            node.getAParametro().apply(this);
        }
        outAAParamsAParametros(node);
    }

    public void inAAListaAParams(AAListaAParams node)
    {
        defaultIn(node);
    }

    public void outAAListaAParams(AAListaAParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAListaAParams(AAListaAParams node)
    {
        inAAListaAParams(node);
        if(node.getAParametro() != null)
        {
            node.getAParametro().apply(this);
        }
        outAAListaAParams(node);
    }

    public void inAAParamAParametro(AAParamAParametro node)
    {
        defaultIn(node);
    }

    public void outAAParamAParametro(AAParamAParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParamAParametro(AAParamAParametro node)
    {
        inAAParamAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAAParamAParametro(node);
    }

    public void inAASeAComando(AASeAComando node)
    {
        defaultIn(node);
    }

    public void outAASeAComando(AASeAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASeAComando(AASeAComando node)
    {
        inAASeAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAExprInversora() != null)
        {
            node.getAExprInversora().apply(this);
        }
        outAASeAComando(node);
    }

    public void inAASeSenaoAComando(AASeSenaoAComando node)
    {
        defaultIn(node);
    }

    public void outAASeSenaoAComando(AASeSenaoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASeSenaoAComando(AASeSenaoAComando node)
    {
        inAASeSenaoAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAComandoDois() != null)
        {
            node.getAComandoDois().apply(this);
        }
        if(node.getAExprInversora() != null)
        {
            node.getAExprInversora().apply(this);
        }
        outAASeSenaoAComando(node);
    }

    public void inAAEnquantoAComando(AAEnquantoAComando node)
    {
        defaultIn(node);
    }

    public void outAAEnquantoAComando(AAEnquantoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAEnquantoAComando(AAEnquantoAComando node)
    {
        inAAEnquantoAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAExprInversora() != null)
        {
            node.getAExprInversora().apply(this);
        }
        outAAEnquantoAComando(node);
    }

    public void inAAAtbrAComando(AAAtbrAComando node)
    {
        defaultIn(node);
    }

    public void outAAAtbrAComando(AAAtbrAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtbrAComando(AAAtbrAComando node)
    {
        inAAAtbrAComando(node);
        if(node.getAExprInversora() != null)
        {
            node.getAExprInversora().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAAtbrAComando(node);
    }

    public void inAAChamadaMetdAComando(AAChamadaMetdAComando node)
    {
        defaultIn(node);
    }

    public void outAAChamadaMetdAComando(AAChamadaMetdAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAChamadaMetdAComando(AAChamadaMetdAComando node)
    {
        inAAChamadaMetdAComando(node);
        if(node.getAChamada() != null)
        {
            node.getAChamada().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAChamadaMetdAComando(node);
    }

    public void inAABlocoAComando(AABlocoAComando node)
    {
        defaultIn(node);
    }

    public void outAABlocoAComando(AABlocoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoAComando(AABlocoAComando node)
    {
        inAABlocoAComando(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAABlocoAComando(node);
    }

    public void inAASeSenaoAComandoDois(AASeSenaoAComandoDois node)
    {
        defaultIn(node);
    }

    public void outAASeSenaoAComandoDois(AASeSenaoAComandoDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASeSenaoAComandoDois(AASeSenaoAComandoDois node)
    {
        inAASeSenaoAComandoDois(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAASeSenaoAComandoDois(node);
    }

    public void inAABlocoAComandoDois(AABlocoAComandoDois node)
    {
        defaultIn(node);
    }

    public void outAABlocoAComandoDois(AABlocoAComandoDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoAComandoDois(AABlocoAComandoDois node)
    {
        inAABlocoAComandoDois(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAABlocoAComandoDois(node);
    }

    public void inAAIniciarBlocoABloco(AAIniciarBlocoABloco node)
    {
        defaultIn(node);
    }

    public void outAAIniciarBlocoABloco(AAIniciarBlocoABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIniciarBlocoABloco(AAIniciarBlocoABloco node)
    {
        inAAIniciarBlocoABloco(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            Collections.reverse(copy);
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAAtributos> copy = new ArrayList<PAAtributos>(node.getAAtributos());
            Collections.reverse(copy);
            for(PAAtributos e : copy)
            {
                e.apply(this);
            }
        }
        outAAIniciarBlocoABloco(node);
    }

    public void inAADecObjAAtributos(AADecObjAAtributos node)
    {
        defaultIn(node);
    }

    public void outAADecObjAAtributos(AADecObjAAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADecObjAAtributos(AADecObjAAtributos node)
    {
        inAADecObjAAtributos(node);
        if(node.getADecObj() != null)
        {
            node.getADecObj().apply(this);
        }
        outAADecObjAAtributos(node);
    }

    public void inAADecVarAAtributos(AADecVarAAtributos node)
    {
        defaultIn(node);
    }

    public void outAADecVarAAtributos(AADecVarAAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADecVarAAtributos(AADecVarAAtributos node)
    {
        inAADecVarAAtributos(node);
        if(node.getADecVar() != null)
        {
            node.getADecVar().apply(this);
        }
        outAADecVarAAtributos(node);
    }

    public void inAADecConstAAtributos(AADecConstAAtributos node)
    {
        defaultIn(node);
    }

    public void outAADecConstAAtributos(AADecConstAAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADecConstAAtributos(AADecConstAAtributos node)
    {
        inAADecConstAAtributos(node);
        if(node.getADecConst() != null)
        {
            node.getADecConst().apply(this);
        }
        outAADecConstAAtributos(node);
    }

    public void inAAExprAExprInversora(AAExprAExprInversora node)
    {
        defaultIn(node);
    }

    public void outAAExprAExprInversora(AAExprAExprInversora node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExprAExprInversora(AAExprAExprInversora node)
    {
        inAAExprAExprInversora(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAAExprAExprInversora(node);
    }

    public void inAAInversorAExprInversora(AAInversorAExprInversora node)
    {
        defaultIn(node);
    }

    public void outAAInversorAExprInversora(AAInversorAExprInversora node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAInversorAExprInversora(AAInversorAExprInversora node)
    {
        inAAInversorAExprInversora(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAAInversorAExprInversora(node);
    }

    public void inAAIdentifierAExpr(AAIdentifierAExpr node)
    {
        defaultIn(node);
    }

    public void outAAIdentifierAExpr(AAIdentifierAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdentifierAExpr(AAIdentifierAExpr node)
    {
        inAAIdentifierAExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAIdentifierAExpr(node);
    }

    public void inAANRealAExpr(AANRealAExpr node)
    {
        defaultIn(node);
    }

    public void outAANRealAExpr(AANRealAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANRealAExpr(AANRealAExpr node)
    {
        inAANRealAExpr(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outAANRealAExpr(node);
    }

    public void inAAVerdadeAExpr(AAVerdadeAExpr node)
    {
        defaultIn(node);
    }

    public void outAAVerdadeAExpr(AAVerdadeAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVerdadeAExpr(AAVerdadeAExpr node)
    {
        inAAVerdadeAExpr(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outAAVerdadeAExpr(node);
    }

    public void inAAFalsoAExpr(AAFalsoAExpr node)
    {
        defaultIn(node);
    }

    public void outAAFalsoAExpr(AAFalsoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFalsoAExpr(AAFalsoAExpr node)
    {
        inAAFalsoAExpr(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAAFalsoAExpr(node);
    }

    public void inAAChamadaAtributoAExpr(AAChamadaAtributoAExpr node)
    {
        defaultIn(node);
    }

    public void outAAChamadaAtributoAExpr(AAChamadaAtributoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAChamadaAtributoAExpr(AAChamadaAtributoAExpr node)
    {
        inAAChamadaAtributoAExpr(node);
        if(node.getAAtributo() != null)
        {
            node.getAAtributo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAChamadaAtributoAExpr(node);
    }

    public void inAAChamadaMetdAExpr(AAChamadaMetdAExpr node)
    {
        defaultIn(node);
    }

    public void outAAChamadaMetdAExpr(AAChamadaMetdAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAChamadaMetdAExpr(AAChamadaMetdAExpr node)
    {
        inAAChamadaMetdAExpr(node);
        if(node.getAChamada() != null)
        {
            node.getAChamada().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAChamadaMetdAExpr(node);
    }

    public void inAASomaAExpr(AASomaAExpr node)
    {
        defaultIn(node);
    }

    public void outAASomaAExpr(AASomaAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASomaAExpr(AASomaAExpr node)
    {
        inAASomaAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAASomaAExpr(node);
    }

    public void inAAMenosAExpr(AAMenosAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMenosAExpr(AAMenosAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMenosAExpr(AAMenosAExpr node)
    {
        inAAMenosAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMenosAExpr(node);
    }

    public void inAAMultAExpr(AAMultAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMultAExpr(AAMultAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMultAExpr(AAMultAExpr node)
    {
        inAAMultAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMultAExpr(node);
    }

    public void inAADivAExpr(AADivAExpr node)
    {
        defaultIn(node);
    }

    public void outAADivAExpr(AADivAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADivAExpr(AADivAExpr node)
    {
        inAADivAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAADivAExpr(node);
    }

    public void inAAModAExpr(AAModAExpr node)
    {
        defaultIn(node);
    }

    public void outAAModAExpr(AAModAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAModAExpr(AAModAExpr node)
    {
        inAAModAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAModAExpr(node);
    }

    public void inAAIgualAExpr(AAIgualAExpr node)
    {
        defaultIn(node);
    }

    public void outAAIgualAExpr(AAIgualAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIgualAExpr(AAIgualAExpr node)
    {
        inAAIgualAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAIgualAExpr(node);
    }

    public void inAAELogicoAExpr(AAELogicoAExpr node)
    {
        defaultIn(node);
    }

    public void outAAELogicoAExpr(AAELogicoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAELogicoAExpr(AAELogicoAExpr node)
    {
        inAAELogicoAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAELogicoAExpr(node);
    }

    public void inAAOuLogicoAExpr(AAOuLogicoAExpr node)
    {
        defaultIn(node);
    }

    public void outAAOuLogicoAExpr(AAOuLogicoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAOuLogicoAExpr(AAOuLogicoAExpr node)
    {
        inAAOuLogicoAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAOuLogicoAExpr(node);
    }

    public void inAAMenorAExpr(AAMenorAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMenorAExpr(AAMenorAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMenorAExpr(AAMenorAExpr node)
    {
        inAAMenorAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMenorAExpr(node);
    }

    public void inAAMenorIgualAExpr(AAMenorIgualAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMenorIgualAExpr(AAMenorIgualAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMenorIgualAExpr(AAMenorIgualAExpr node)
    {
        inAAMenorIgualAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMenorIgualAExpr(node);
    }

    public void inAABlocoExpAExpr(AABlocoExpAExpr node)
    {
        defaultIn(node);
    }

    public void outAABlocoExpAExpr(AABlocoExpAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoExpAExpr(AABlocoExpAExpr node)
    {
        inAABlocoExpAExpr(node);
        if(node.getABlocoExp() != null)
        {
            node.getABlocoExp().apply(this);
        }
        outAABlocoExpAExpr(node);
    }

    public void inAABlocoABlocoExp(AABlocoABlocoExp node)
    {
        defaultIn(node);
    }

    public void outAABlocoABlocoExp(AABlocoABlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoABlocoExp(AABlocoABlocoExp node)
    {
        inAABlocoABlocoExp(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        {
            List<PADecConst> copy = new ArrayList<PADecConst>(node.getADecConst());
            Collections.reverse(copy);
            for(PADecConst e : copy)
            {
                e.apply(this);
            }
        }
        outAABlocoABlocoExp(node);
    }

    public void inAAChamadaMetodoAChamada(AAChamadaMetodoAChamada node)
    {
        defaultIn(node);
    }

    public void outAAChamadaMetodoAChamada(AAChamadaMetodoAChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAChamadaMetodoAChamada(AAChamadaMetodoAChamada node)
    {
        inAAChamadaMetodoAChamada(node);
        {
            List<PAListaExpr> copy = new ArrayList<PAListaExpr>(node.getAListaExpr());
            Collections.reverse(copy);
            for(PAListaExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAChamadaMetodoAChamada(node);
    }

    public void inAAReservadoLeAChamada(AAReservadoLeAChamada node)
    {
        defaultIn(node);
    }

    public void outAAReservadoLeAChamada(AAReservadoLeAChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAReservadoLeAChamada(AAReservadoLeAChamada node)
    {
        inAAReservadoLeAChamada(node);
        {
            List<PAListaExpr> copy = new ArrayList<PAListaExpr>(node.getAListaExpr());
            Collections.reverse(copy);
            for(PAListaExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAAReservadoLeAChamada(node);
    }

    public void inAAReservadoImprimeAChamada(AAReservadoImprimeAChamada node)
    {
        defaultIn(node);
    }

    public void outAAReservadoImprimeAChamada(AAReservadoImprimeAChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAReservadoImprimeAChamada(AAReservadoImprimeAChamada node)
    {
        inAAReservadoImprimeAChamada(node);
        {
            List<PAListaExpr> copy = new ArrayList<PAListaExpr>(node.getAListaExpr());
            Collections.reverse(copy);
            for(PAListaExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAAReservadoImprimeAChamada(node);
    }

    public void inAAIdAAtributo(AAIdAAtributo node)
    {
        defaultIn(node);
    }

    public void outAAIdAAtributo(AAIdAAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdAAtributo(AAIdAAtributo node)
    {
        inAAIdAAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAIdAAtributo(node);
    }

    public void inAAExpressoesAListaExpr(AAExpressoesAListaExpr node)
    {
        defaultIn(node);
    }

    public void outAAExpressoesAListaExpr(AAExpressoesAListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpressoesAListaExpr(AAExpressoesAListaExpr node)
    {
        inAAExpressoesAListaExpr(node);
        {
            List<PAExprs> copy = new ArrayList<PAExprs>(node.getAExprs());
            Collections.reverse(copy);
            for(PAExprs e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAAExpressoesAListaExpr(node);
    }

    public void inAAListaAExprs(AAListaAExprs node)
    {
        defaultIn(node);
    }

    public void outAAListaAExprs(AAListaAExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAListaAExprs(AAListaAExprs node)
    {
        inAAListaAExprs(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAAListaAExprs(node);
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAPrograma().apply(this);
        outStart(node);
    }

    public void inAAPrograma(AAPrograma node)
    {
        defaultIn(node);
    }

    public void outAAPrograma(AAPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPrograma(AAPrograma node)
    {
        inAAPrograma(node);
        {
            List<PADefClasse> copy = new ArrayList<PADefClasse>(node.getADefClasse());
            Collections.reverse(copy);
            for(PADefClasse e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAFamilia() != null)
        {
            node.getAFamilia().apply(this);
        }
        outAAPrograma(node);
    }

    public void inAArNotEmptyAFamilia(AArNotEmptyAFamilia node)
    {
        defaultIn(node);
    }

    public void outAArNotEmptyAFamilia(AArNotEmptyAFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArNotEmptyAFamilia(AArNotEmptyAFamilia node)
    {
        inAArNotEmptyAFamilia(node);
        {
            List<PAListaRelacoes> copy = new ArrayList<PAListaRelacoes>(node.getAListaRelacoes());
            Collections.reverse(copy);
            for(PAListaRelacoes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getARelacao() != null)
        {
            node.getARelacao().apply(this);
        }
        outAArNotEmptyAFamilia(node);
    }

    public void inAArRelacoesAListaRelacoes(AArRelacoesAListaRelacoes node)
    {
        defaultIn(node);
    }

    public void outAArRelacoesAListaRelacoes(AArRelacoesAListaRelacoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArRelacoesAListaRelacoes(AArRelacoesAListaRelacoes node)
    {
        inAArRelacoesAListaRelacoes(node);
        if(node.getARelacao() != null)
        {
            node.getARelacao().apply(this);
        }
        outAArRelacoesAListaRelacoes(node);
    }

    public void inAArRelARelacao(AArRelARelacao node)
    {
        defaultIn(node);
    }

    public void outAArRelARelacao(AArRelARelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArRelARelacao(AArRelARelacao node)
    {
        inAArRelARelacao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArRelARelacao(node);
    }

    public void inAArDefiniADefClasse(AArDefiniADefClasse node)
    {
        defaultIn(node);
    }

    public void outAArDefiniADefClasse(AArDefiniADefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDefiniADefClasse(AArDefiniADefClasse node)
    {
        inAArDefiniADefClasse(node);
        {
            List<PAMetodos> copy = new ArrayList<PAMetodos>(node.getAMetodos());
            Collections.reverse(copy);
            for(PAMetodos e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAAtributos> copy = new ArrayList<PAAtributos>(node.getAAtributos());
            Collections.reverse(copy);
            for(PAAtributos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outAArDefiniADefClasse(node);
    }

    public void inAArProcFuncAMetodos(AArProcFuncAMetodos node)
    {
        defaultIn(node);
    }

    public void outAArProcFuncAMetodos(AArProcFuncAMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArProcFuncAMetodos(AArProcFuncAMetodos node)
    {
        inAArProcFuncAMetodos(node);
        {
            List<PAProcFunc> copy = new ArrayList<PAProcFunc>(node.getAProcFunc());
            Collections.reverse(copy);
            for(PAProcFunc e : copy)
            {
                e.apply(this);
            }
        }
        outAArProcFuncAMetodos(node);
    }

    public void inAArDecProcedimentoAProcFunc(AArDecProcedimentoAProcFunc node)
    {
        defaultIn(node);
    }

    public void outAArDecProcedimentoAProcFunc(AArDecProcedimentoAProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDecProcedimentoAProcFunc(AArDecProcedimentoAProcFunc node)
    {
        inAArDecProcedimentoAProcFunc(node);
        if(node.getADecProcedimento() != null)
        {
            node.getADecProcedimento().apply(this);
        }
        outAArDecProcedimentoAProcFunc(node);
    }

    public void inAArDecFuncaoAProcFunc(AArDecFuncaoAProcFunc node)
    {
        defaultIn(node);
    }

    public void outAArDecFuncaoAProcFunc(AArDecFuncaoAProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDecFuncaoAProcFunc(AArDecFuncaoAProcFunc node)
    {
        inAArDecFuncaoAProcFunc(node);
        if(node.getADecFuncao() != null)
        {
            node.getADecFuncao().apply(this);
        }
        outAArDecFuncaoAProcFunc(node);
    }

    public void inAArObjADecObj(AArObjADecObj node)
    {
        defaultIn(node);
    }

    public void outAArObjADecObj(AArObjADecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArObjADecObj(AArObjADecObj node)
    {
        inAArObjADecObj(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipoClasse() != null)
        {
            node.getATipoClasse().apply(this);
        }
        outAArObjADecObj(node);
    }

    public void inAArObjReservadoADecObj(AArObjReservadoADecObj node)
    {
        defaultIn(node);
    }

    public void outAArObjReservadoADecObj(AArObjReservadoADecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArObjReservadoADecObj(AArObjReservadoADecObj node)
    {
        inAArObjReservadoADecObj(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getClasseReservada() != null)
        {
            node.getClasseReservada().apply(this);
        }
        outAArObjReservadoADecObj(node);
    }

    public void inAArVarADecVar(AArVarADecVar node)
    {
        defaultIn(node);
    }

    public void outAArVarADecVar(AArVarADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArVarADecVar(AArVarADecVar node)
    {
        inAArVarADecVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipoPrimitivo() != null)
        {
            node.getATipoPrimitivo().apply(this);
        }
        outAArVarADecVar(node);
    }

    public void inAArConstADecConst(AArConstADecConst node)
    {
        defaultIn(node);
    }

    public void outAArConstADecConst(AArConstADecConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArConstADecConst(AArConstADecConst node)
    {
        inAArConstADecConst(node);
        if(node.getATipoPrimitivo() != null)
        {
            node.getATipoPrimitivo().apply(this);
        }
        outAArConstADecConst(node);
    }

    public void inAArInitAInicializacao(AArInitAInicializacao node)
    {
        defaultIn(node);
    }

    public void outAArInitAInicializacao(AArInitAInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArInitAInicializacao(AArInitAInicializacao node)
    {
        inAArInitAInicializacao(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArInitAInicializacao(node);
    }

    public void inAArTipoClasseATipo(AArTipoClasseATipo node)
    {
        defaultIn(node);
    }

    public void outAArTipoClasseATipo(AArTipoClasseATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArTipoClasseATipo(AArTipoClasseATipo node)
    {
        inAArTipoClasseATipo(node);
        if(node.getATipoClasse() != null)
        {
            node.getATipoClasse().apply(this);
        }
        outAArTipoClasseATipo(node);
    }

    public void inAArTipoPrimitivoATipo(AArTipoPrimitivoATipo node)
    {
        defaultIn(node);
    }

    public void outAArTipoPrimitivoATipo(AArTipoPrimitivoATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArTipoPrimitivoATipo(AArTipoPrimitivoATipo node)
    {
        inAArTipoPrimitivoATipo(node);
        if(node.getATipoPrimitivo() != null)
        {
            node.getATipoPrimitivo().apply(this);
        }
        outAArTipoPrimitivoATipo(node);
    }

    public void inAArClasseATipoClasse(AArClasseATipoClasse node)
    {
        defaultIn(node);
    }

    public void outAArClasseATipoClasse(AArClasseATipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArClasseATipoClasse(AArClasseATipoClasse node)
    {
        inAArClasseATipoClasse(node);
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outAArClasseATipoClasse(node);
    }

    public void inAArRealATipoPrimitivo(AArRealATipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outAArRealATipoPrimitivo(AArRealATipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArRealATipoPrimitivo(AArRealATipoPrimitivo node)
    {
        inAArRealATipoPrimitivo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outAArRealATipoPrimitivo(node);
    }

    public void inAArBoolATipoPrimitivo(AArBoolATipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outAArBoolATipoPrimitivo(AArBoolATipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArBoolATipoPrimitivo(AArBoolATipoPrimitivo node)
    {
        inAArBoolATipoPrimitivo(node);
        if(node.getTipoBool() != null)
        {
            node.getTipoBool().apply(this);
        }
        outAArBoolATipoPrimitivo(node);
    }

    public void inAArProcedCompletoADecProcedimento(AArProcedCompletoADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAArProcedCompletoADecProcedimento(AArProcedCompletoADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArProcedCompletoADecProcedimento(AArProcedCompletoADecProcedimento node)
    {
        inAArProcedCompletoADecProcedimento(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArProcedCompletoADecProcedimento(node);
    }

    public void inAArProcedimentoADecProcedimento(AArProcedimentoADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAArProcedimentoADecProcedimento(AArProcedimentoADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArProcedimentoADecProcedimento(AArProcedimentoADecProcedimento node)
    {
        inAArProcedimentoADecProcedimento(node);
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArProcedimentoADecProcedimento(node);
    }

    public void inAArFuncaoCompletaADecFuncao(AArFuncaoCompletaADecFuncao node)
    {
        defaultIn(node);
    }

    public void outAArFuncaoCompletaADecFuncao(AArFuncaoCompletaADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArFuncaoCompletaADecFuncao(AArFuncaoCompletaADecFuncao node)
    {
        inAArFuncaoCompletaADecFuncao(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAArFuncaoCompletaADecFuncao(node);
    }

    public void inAArFuncaoADecFuncao(AArFuncaoADecFuncao node)
    {
        defaultIn(node);
    }

    public void outAArFuncaoADecFuncao(AArFuncaoADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArFuncaoADecFuncao(AArFuncaoADecFuncao node)
    {
        inAArFuncaoADecFuncao(node);
        if(node.getAParametros() != null)
        {
            node.getAParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAArFuncaoADecFuncao(node);
    }

    public void inAArParamsAParametros(AArParamsAParametros node)
    {
        defaultIn(node);
    }

    public void outAArParamsAParametros(AArParamsAParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArParamsAParametros(AArParamsAParametros node)
    {
        inAArParamsAParametros(node);
        {
            List<PAParams> copy = new ArrayList<PAParams>(node.getAParams());
            Collections.reverse(copy);
            for(PAParams e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAParametro() != null)
        {
            node.getAParametro().apply(this);
        }
        outAArParamsAParametros(node);
    }

    public void inAArListaAParams(AArListaAParams node)
    {
        defaultIn(node);
    }

    public void outAArListaAParams(AArListaAParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArListaAParams(AArListaAParams node)
    {
        inAArListaAParams(node);
        if(node.getAParametro() != null)
        {
            node.getAParametro().apply(this);
        }
        outAArListaAParams(node);
    }

    public void inAArParamAParametro(AArParamAParametro node)
    {
        defaultIn(node);
    }

    public void outAArParamAParametro(AArParamAParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArParamAParametro(AArParamAParametro node)
    {
        inAArParamAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAArParamAParametro(node);
    }

    public void inAArSeAComando(AArSeAComando node)
    {
        defaultIn(node);
    }

    public void outAArSeAComando(AArSeAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArSeAComando(AArSeAComando node)
    {
        inAArSeAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAExprIni() != null)
        {
            node.getAExprIni().apply(this);
        }
        outAArSeAComando(node);
    }

    public void inAArSeSenaoAComando(AArSeSenaoAComando node)
    {
        defaultIn(node);
    }

    public void outAArSeSenaoAComando(AArSeSenaoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArSeSenaoAComando(AArSeSenaoAComando node)
    {
        inAArSeSenaoAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAComandoDois() != null)
        {
            node.getAComandoDois().apply(this);
        }
        if(node.getAExprIni() != null)
        {
            node.getAExprIni().apply(this);
        }
        outAArSeSenaoAComando(node);
    }

    public void inAArEnquantoAComando(AArEnquantoAComando node)
    {
        defaultIn(node);
    }

    public void outAArEnquantoAComando(AArEnquantoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArEnquantoAComando(AArEnquantoAComando node)
    {
        inAArEnquantoAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAExprIni() != null)
        {
            node.getAExprIni().apply(this);
        }
        outAArEnquantoAComando(node);
    }

    public void inAArAtbrAComando(AArAtbrAComando node)
    {
        defaultIn(node);
    }

    public void outAArAtbrAComando(AArAtbrAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArAtbrAComando(AArAtbrAComando node)
    {
        inAArAtbrAComando(node);
        if(node.getAExprIni() != null)
        {
            node.getAExprIni().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArAtbrAComando(node);
    }

    public void inAArChamadaMetdAComando(AArChamadaMetdAComando node)
    {
        defaultIn(node);
    }

    public void outAArChamadaMetdAComando(AArChamadaMetdAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArChamadaMetdAComando(AArChamadaMetdAComando node)
    {
        inAArChamadaMetdAComando(node);
        if(node.getAChamada() != null)
        {
            node.getAChamada().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArChamadaMetdAComando(node);
    }

    public void inAArBlocoAComando(AArBlocoAComando node)
    {
        defaultIn(node);
    }

    public void outAArBlocoAComando(AArBlocoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArBlocoAComando(AArBlocoAComando node)
    {
        inAArBlocoAComando(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAArBlocoAComando(node);
    }

    public void inAArSeSenaoAComandoDois(AArSeSenaoAComandoDois node)
    {
        defaultIn(node);
    }

    public void outAArSeSenaoAComandoDois(AArSeSenaoAComandoDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArSeSenaoAComandoDois(AArSeSenaoAComandoDois node)
    {
        inAArSeSenaoAComandoDois(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAArSeSenaoAComandoDois(node);
    }

    public void inAArBlocoAComandoDois(AArBlocoAComandoDois node)
    {
        defaultIn(node);
    }

    public void outAArBlocoAComandoDois(AArBlocoAComandoDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArBlocoAComandoDois(AArBlocoAComandoDois node)
    {
        inAArBlocoAComandoDois(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAArBlocoAComandoDois(node);
    }

    public void inAArIniciarBlocoABloco(AArIniciarBlocoABloco node)
    {
        defaultIn(node);
    }

    public void outAArIniciarBlocoABloco(AArIniciarBlocoABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArIniciarBlocoABloco(AArIniciarBlocoABloco node)
    {
        inAArIniciarBlocoABloco(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            Collections.reverse(copy);
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAAtributos> copy = new ArrayList<PAAtributos>(node.getAAtributos());
            Collections.reverse(copy);
            for(PAAtributos e : copy)
            {
                e.apply(this);
            }
        }
        outAArIniciarBlocoABloco(node);
    }

    public void inAArDecObjAAtributos(AArDecObjAAtributos node)
    {
        defaultIn(node);
    }

    public void outAArDecObjAAtributos(AArDecObjAAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDecObjAAtributos(AArDecObjAAtributos node)
    {
        inAArDecObjAAtributos(node);
        if(node.getADecObj() != null)
        {
            node.getADecObj().apply(this);
        }
        outAArDecObjAAtributos(node);
    }

    public void inAArDecVarAAtributos(AArDecVarAAtributos node)
    {
        defaultIn(node);
    }

    public void outAArDecVarAAtributos(AArDecVarAAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDecVarAAtributos(AArDecVarAAtributos node)
    {
        inAArDecVarAAtributos(node);
        if(node.getADecVar() != null)
        {
            node.getADecVar().apply(this);
        }
        outAArDecVarAAtributos(node);
    }

    public void inAArDecConstAAtributos(AArDecConstAAtributos node)
    {
        defaultIn(node);
    }

    public void outAArDecConstAAtributos(AArDecConstAAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDecConstAAtributos(AArDecConstAAtributos node)
    {
        inAArDecConstAAtributos(node);
        if(node.getADecConst() != null)
        {
            node.getADecConst().apply(this);
        }
        outAArDecConstAAtributos(node);
    }

    public void inAArExprAExprIni(AArExprAExprIni node)
    {
        defaultIn(node);
    }

    public void outAArExprAExprIni(AArExprAExprIni node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArExprAExprIni(AArExprAExprIni node)
    {
        inAArExprAExprIni(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAArExprAExprIni(node);
    }

    public void inAArInversorAExprIni(AArInversorAExprIni node)
    {
        defaultIn(node);
    }

    public void outAArInversorAExprIni(AArInversorAExprIni node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArInversorAExprIni(AArInversorAExprIni node)
    {
        inAArInversorAExprIni(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAArInversorAExprIni(node);
    }

    public void inAArIdentifierAExpr(AArIdentifierAExpr node)
    {
        defaultIn(node);
    }

    public void outAArIdentifierAExpr(AArIdentifierAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArIdentifierAExpr(AArIdentifierAExpr node)
    {
        inAArIdentifierAExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArIdentifierAExpr(node);
    }

    public void inAArNRealAExpr(AArNRealAExpr node)
    {
        defaultIn(node);
    }

    public void outAArNRealAExpr(AArNRealAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArNRealAExpr(AArNRealAExpr node)
    {
        inAArNRealAExpr(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outAArNRealAExpr(node);
    }

    public void inAArVerdadeAExpr(AArVerdadeAExpr node)
    {
        defaultIn(node);
    }

    public void outAArVerdadeAExpr(AArVerdadeAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArVerdadeAExpr(AArVerdadeAExpr node)
    {
        inAArVerdadeAExpr(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outAArVerdadeAExpr(node);
    }

    public void inAArFalsoAExpr(AArFalsoAExpr node)
    {
        defaultIn(node);
    }

    public void outAArFalsoAExpr(AArFalsoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArFalsoAExpr(AArFalsoAExpr node)
    {
        inAArFalsoAExpr(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAArFalsoAExpr(node);
    }

    public void inAArChamadaAtributoAExpr(AArChamadaAtributoAExpr node)
    {
        defaultIn(node);
    }

    public void outAArChamadaAtributoAExpr(AArChamadaAtributoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArChamadaAtributoAExpr(AArChamadaAtributoAExpr node)
    {
        inAArChamadaAtributoAExpr(node);
        if(node.getAAtributo() != null)
        {
            node.getAAtributo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArChamadaAtributoAExpr(node);
    }

    public void inAArChamadaMetdAExpr(AArChamadaMetdAExpr node)
    {
        defaultIn(node);
    }

    public void outAArChamadaMetdAExpr(AArChamadaMetdAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArChamadaMetdAExpr(AArChamadaMetdAExpr node)
    {
        inAArChamadaMetdAExpr(node);
        if(node.getAChamada() != null)
        {
            node.getAChamada().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArChamadaMetdAExpr(node);
    }

    public void inAArSomaAExpr(AArSomaAExpr node)
    {
        defaultIn(node);
    }

    public void outAArSomaAExpr(AArSomaAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArSomaAExpr(AArSomaAExpr node)
    {
        inAArSomaAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArSomaAExpr(node);
    }

    public void inAArMenosAExpr(AArMenosAExpr node)
    {
        defaultIn(node);
    }

    public void outAArMenosAExpr(AArMenosAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArMenosAExpr(AArMenosAExpr node)
    {
        inAArMenosAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArMenosAExpr(node);
    }

    public void inAArMultAExpr(AArMultAExpr node)
    {
        defaultIn(node);
    }

    public void outAArMultAExpr(AArMultAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArMultAExpr(AArMultAExpr node)
    {
        inAArMultAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArMultAExpr(node);
    }

    public void inAArDivAExpr(AArDivAExpr node)
    {
        defaultIn(node);
    }

    public void outAArDivAExpr(AArDivAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDivAExpr(AArDivAExpr node)
    {
        inAArDivAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArDivAExpr(node);
    }

    public void inAArModAExpr(AArModAExpr node)
    {
        defaultIn(node);
    }

    public void outAArModAExpr(AArModAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArModAExpr(AArModAExpr node)
    {
        inAArModAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArModAExpr(node);
    }

    public void inAArIgualAExpr(AArIgualAExpr node)
    {
        defaultIn(node);
    }

    public void outAArIgualAExpr(AArIgualAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArIgualAExpr(AArIgualAExpr node)
    {
        inAArIgualAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArIgualAExpr(node);
    }

    public void inAArELogicoAExpr(AArELogicoAExpr node)
    {
        defaultIn(node);
    }

    public void outAArELogicoAExpr(AArELogicoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArELogicoAExpr(AArELogicoAExpr node)
    {
        inAArELogicoAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArELogicoAExpr(node);
    }

    public void inAArOuLogicoAExpr(AArOuLogicoAExpr node)
    {
        defaultIn(node);
    }

    public void outAArOuLogicoAExpr(AArOuLogicoAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArOuLogicoAExpr(AArOuLogicoAExpr node)
    {
        inAArOuLogicoAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArOuLogicoAExpr(node);
    }

    public void inAArMenorAExpr(AArMenorAExpr node)
    {
        defaultIn(node);
    }

    public void outAArMenorAExpr(AArMenorAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArMenorAExpr(AArMenorAExpr node)
    {
        inAArMenorAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArMenorAExpr(node);
    }

    public void inAArMenorIgualAExpr(AArMenorIgualAExpr node)
    {
        defaultIn(node);
    }

    public void outAArMenorIgualAExpr(AArMenorIgualAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArMenorIgualAExpr(AArMenorIgualAExpr node)
    {
        inAArMenorIgualAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAArMenorIgualAExpr(node);
    }

    public void inAArBlocoExpAExpr(AArBlocoExpAExpr node)
    {
        defaultIn(node);
    }

    public void outAArBlocoExpAExpr(AArBlocoExpAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArBlocoExpAExpr(AArBlocoExpAExpr node)
    {
        inAArBlocoExpAExpr(node);
        if(node.getABlocoExp() != null)
        {
            node.getABlocoExp().apply(this);
        }
        outAArBlocoExpAExpr(node);
    }

    public void inAArBlocoABlocoExp(AArBlocoABlocoExp node)
    {
        defaultIn(node);
    }

    public void outAArBlocoABlocoExp(AArBlocoABlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArBlocoABlocoExp(AArBlocoABlocoExp node)
    {
        inAArBlocoABlocoExp(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        {
            List<PADecConst> copy = new ArrayList<PADecConst>(node.getADecConst());
            Collections.reverse(copy);
            for(PADecConst e : copy)
            {
                e.apply(this);
            }
        }
        outAArBlocoABlocoExp(node);
    }

    public void inAArChamadaMetodoAChamada(AArChamadaMetodoAChamada node)
    {
        defaultIn(node);
    }

    public void outAArChamadaMetodoAChamada(AArChamadaMetodoAChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArChamadaMetodoAChamada(AArChamadaMetodoAChamada node)
    {
        inAArChamadaMetodoAChamada(node);
        {
            List<PAListaExpr> copy = new ArrayList<PAListaExpr>(node.getAListaExpr());
            Collections.reverse(copy);
            for(PAListaExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArChamadaMetodoAChamada(node);
    }

    public void inAArReservadoLeAChamada(AArReservadoLeAChamada node)
    {
        defaultIn(node);
    }

    public void outAArReservadoLeAChamada(AArReservadoLeAChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArReservadoLeAChamada(AArReservadoLeAChamada node)
    {
        inAArReservadoLeAChamada(node);
        {
            List<PAListaExpr> copy = new ArrayList<PAListaExpr>(node.getAListaExpr());
            Collections.reverse(copy);
            for(PAListaExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAArReservadoLeAChamada(node);
    }

    public void inAArReservadoImprimeAChamada(AArReservadoImprimeAChamada node)
    {
        defaultIn(node);
    }

    public void outAArReservadoImprimeAChamada(AArReservadoImprimeAChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArReservadoImprimeAChamada(AArReservadoImprimeAChamada node)
    {
        inAArReservadoImprimeAChamada(node);
        {
            List<PAListaExpr> copy = new ArrayList<PAListaExpr>(node.getAListaExpr());
            Collections.reverse(copy);
            for(PAListaExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAArReservadoImprimeAChamada(node);
    }

    public void inAArIdAAtributo(AArIdAAtributo node)
    {
        defaultIn(node);
    }

    public void outAArIdAAtributo(AArIdAAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArIdAAtributo(AArIdAAtributo node)
    {
        inAArIdAAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArIdAAtributo(node);
    }

    public void inAArExpressoesAListaExpr(AArExpressoesAListaExpr node)
    {
        defaultIn(node);
    }

    public void outAArExpressoesAListaExpr(AArExpressoesAListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArExpressoesAListaExpr(AArExpressoesAListaExpr node)
    {
        inAArExpressoesAListaExpr(node);
        {
            List<PAExprs> copy = new ArrayList<PAExprs>(node.getAExprs());
            Collections.reverse(copy);
            for(PAExprs e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAArExpressoesAListaExpr(node);
    }

    public void inAArListaAExprs(AArListaAExprs node)
    {
        defaultIn(node);
    }

    public void outAArListaAExprs(AArListaAExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArListaAExprs(AArListaAExprs node)
    {
        inAArListaAExprs(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAArListaAExprs(node);
    }
}

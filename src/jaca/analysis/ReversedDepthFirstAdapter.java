/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExpr().apply(this);
        outStart(node);
    }

    public void inAExprRelacionalExpr(AExprRelacionalExpr node)
    {
        defaultIn(node);
    }

    public void outAExprRelacionalExpr(AExprRelacionalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprRelacionalExpr(AExprRelacionalExpr node)
    {
        inAExprRelacionalExpr(node);
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outAExprRelacionalExpr(node);
    }

    public void inAMenosExpr(AMenosExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpr(AMenosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        inAMenosExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosExpr(node);
    }

    public void inAChamadaAtrbExpr(AChamadaAtrbExpr node)
    {
        defaultIn(node);
    }

    public void outAChamadaAtrbExpr(AChamadaAtrbExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaAtrbExpr(AChamadaAtrbExpr node)
    {
        inAChamadaAtrbExpr(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaAtrbExpr(node);
    }

    public void inAChamadaMetdExpr(AChamadaMetdExpr node)
    {
        defaultIn(node);
    }

    public void outAChamadaMetdExpr(AChamadaMetdExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaMetdExpr(AChamadaMetdExpr node)
    {
        inAChamadaMetdExpr(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaMetdExpr(node);
    }

    public void inAELogicoExpr(AELogicoExpr node)
    {
        defaultIn(node);
    }

    public void outAELogicoExpr(AELogicoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAELogicoExpr(AELogicoExpr node)
    {
        inAELogicoExpr(node);
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getELogico() != null)
        {
            node.getELogico().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAELogicoExpr(node);
    }

    public void inAOuLogicoExpr(AOuLogicoExpr node)
    {
        defaultIn(node);
    }

    public void outAOuLogicoExpr(AOuLogicoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuLogicoExpr(AOuLogicoExpr node)
    {
        inAOuLogicoExpr(node);
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getOuLogico() != null)
        {
            node.getOuLogico().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOuLogicoExpr(node);
    }

    public void inAExprAritmExprRelacional(AExprAritmExprRelacional node)
    {
        defaultIn(node);
    }

    public void outAExprAritmExprRelacional(AExprAritmExprRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAritmExprRelacional(AExprAritmExprRelacional node)
    {
        inAExprAritmExprRelacional(node);
        if(node.getExprAritm() != null)
        {
            node.getExprAritm().apply(this);
        }
        outAExprAritmExprRelacional(node);
    }

    public void inAMenorQueExprRelacional(AMenorQueExprRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorQueExprRelacional(AMenorQueExprRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorQueExprRelacional(AMenorQueExprRelacional node)
    {
        inAMenorQueExprRelacional(node);
        if(node.getExprAritm() != null)
        {
            node.getExprAritm().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outAMenorQueExprRelacional(node);
    }

    public void inAMenorIgualExprRelacional(AMenorIgualExprRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExprRelacional(AMenorIgualExprRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExprRelacional(AMenorIgualExprRelacional node)
    {
        inAMenorIgualExprRelacional(node);
        if(node.getExprAritm() != null)
        {
            node.getExprAritm().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outAMenorIgualExprRelacional(node);
    }

    public void inAIgualExprRelacional(AIgualExprRelacional node)
    {
        defaultIn(node);
    }

    public void outAIgualExprRelacional(AIgualExprRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExprRelacional(AIgualExprRelacional node)
    {
        inAIgualExprRelacional(node);
        if(node.getExprAritm() != null)
        {
            node.getExprAritm().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outAIgualExprRelacional(node);
    }

    public void inAFatorExprAritm(AFatorExprAritm node)
    {
        defaultIn(node);
    }

    public void outAFatorExprAritm(AFatorExprAritm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExprAritm(AFatorExprAritm node)
    {
        inAFatorExprAritm(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExprAritm(node);
    }

    public void inASomaExprAritm(ASomaExprAritm node)
    {
        defaultIn(node);
    }

    public void outASomaExprAritm(ASomaExprAritm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExprAritm(ASomaExprAritm node)
    {
        inASomaExprAritm(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExprAritm() != null)
        {
            node.getExprAritm().apply(this);
        }
        outASomaExprAritm(node);
    }

    public void inASubtExprAritm(ASubtExprAritm node)
    {
        defaultIn(node);
    }

    public void outASubtExprAritm(ASubtExprAritm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtExprAritm(ASubtExprAritm node)
    {
        inASubtExprAritm(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExprAritm() != null)
        {
            node.getExprAritm().apply(this);
        }
        outASubtExprAritm(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outADivFator(node);
    }

    public void inAModFator(AModFator node)
    {
        defaultIn(node);
    }

    public void outAModFator(AModFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFator(AModFator node)
    {
        inAModFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAModFator(node);
    }

    public void inAValorRealTermo(AValorRealTermo node)
    {
        defaultIn(node);
    }

    public void outAValorRealTermo(AValorRealTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorRealTermo(AValorRealTermo node)
    {
        inAValorRealTermo(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outAValorRealTermo(node);
    }

    public void inAParTermo(AParTermo node)
    {
        defaultIn(node);
    }

    public void outAParTermo(AParTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTermo(AParTermo node)
    {
        inAParTermo(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAParTermo(node);
    }

    public void inANegacaoTermo(ANegacaoTermo node)
    {
        defaultIn(node);
    }

    public void outANegacaoTermo(ANegacaoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoTermo(ANegacaoTermo node)
    {
        inANegacaoTermo(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outANegacaoTermo(node);
    }

    public void inAVerdadeValorBool(AVerdadeValorBool node)
    {
        defaultIn(node);
    }

    public void outAVerdadeValorBool(AVerdadeValorBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerdadeValorBool(AVerdadeValorBool node)
    {
        inAVerdadeValorBool(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outAVerdadeValorBool(node);
    }

    public void inAFalsoValorBool(AFalsoValorBool node)
    {
        defaultIn(node);
    }

    public void outAFalsoValorBool(AFalsoValorBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsoValorBool(AFalsoValorBool node)
    {
        inAFalsoValorBool(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAFalsoValorBool(node);
    }

    public void inAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        inAChamadaMetodoChamada(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExpr() != null)
        {
            node.getListaExpr().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaMetodoChamada(node);
    }

    public void inAIdAtributo(AIdAtributo node)
    {
        defaultIn(node);
    }

    public void outAIdAtributo(AIdAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtributo(AIdAtributo node)
    {
        inAIdAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAtributo(node);
    }

    public void inAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        inAExpressoesListaExpr(node);
        {
            List<PExprs> copy = new ArrayList<PExprs>(node.getExprs());
            Collections.reverse(copy);
            for(PExprs e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpressoesListaExpr(node);
    }

    public void inAListaExprs(AListaExprs node)
    {
        defaultIn(node);
    }

    public void outAListaExprs(AListaExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExprs(AListaExprs node)
    {
        inAListaExprs(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAListaExprs(node);
    }
}

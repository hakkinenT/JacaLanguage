/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import jaca.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseANotEmptyFamilia(ANotEmptyFamilia node);
    void caseARelacoesListaRelacoes(ARelacoesListaRelacoes node);
    void caseARelacao(ARelacao node);
    void caseADefClasse(ADefClasse node);
    void caseADecObjAtributos(ADecObjAtributos node);
    void caseADecVarAtributos(ADecVarAtributos node);
    void caseADecConstAtributos(ADecConstAtributos node);
    void caseADecProcedimentoMetodos(ADecProcedimentoMetodos node);
    void caseADecFuncaoMetodos(ADecFuncaoMetodos node);
    void caseAObjDecObj(AObjDecObj node);
    void caseAVarDecVar(AVarDecVar node);
    void caseAConstDecConst(AConstDecConst node);
    void caseAInitInicializacao(AInitInicializacao node);
    void caseATipoClasseTipo(ATipoClasseTipo node);
    void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node);
    void caseAClasseTipoClasse(AClasseTipoClasse node);
    void caseARealTipoPrimitivo(ARealTipoPrimitivo node);
    void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node);
    void caseAPrincipalDecProcedimento(APrincipalDecProcedimento node);
    void caseAProcedCompletoDecProcedimento(AProcedCompletoDecProcedimento node);
    void caseAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node);
    void caseAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node);
    void caseAFuncaoDecFuncao(AFuncaoDecFuncao node);
    void caseAParamsParametros(AParamsParametros node);
    void caseAListaListParam(AListaListParam node);
    void caseAParamParametro(AParamParametro node);
    void caseAComando(AComando node);
    void caseASeComando(ASeComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseAAtbrComando(AAtbrComando node);
    void caseAChamadaMetdComando(AChamadaMetdComando node);
    void caseABlocoComando(ABlocoComando node);
    void caseAComandoDois(AComandoDois node);
    void caseASeSenaoComandoDois(ASeSenaoComandoDois node);
    void caseAIniciarBlocoBloco(AIniciarBlocoBloco node);
    void caseADecObjTipoDecl(ADecObjTipoDecl node);
    void caseADecVarTipoDecl(ADecVarTipoDecl node);
    void caseADecConstTipoDecl(ADecConstTipoDecl node);
    void caseAExprNivelUmExpr(AExprNivelUmExpr node);
    void caseABlocoExprExpr(ABlocoExprExpr node);
    void caseAExprNivelDoisExprNivelUm(AExprNivelDoisExprNivelUm node);
    void caseAELogicoExprNivelUm(AELogicoExprNivelUm node);
    void caseAOuLogicoExprNivelUm(AOuLogicoExprNivelUm node);
    void caseAExprNivelTresExprNivelDois(AExprNivelTresExprNivelDois node);
    void caseAIgualExprNivelDois(AIgualExprNivelDois node);
    void caseAExprNivelQuatroExprNivelTres(AExprNivelQuatroExprNivelTres node);
    void caseAMenorExprNivelTres(AMenorExprNivelTres node);
    void caseAMenorIgualExprNivelTres(AMenorIgualExprNivelTres node);
    void caseAExprNivelCincoExprNivelQuatro(AExprNivelCincoExprNivelQuatro node);
    void caseASomaExprNivelQuatro(ASomaExprNivelQuatro node);
    void caseAMenosExprNivelQuatro(AMenosExprNivelQuatro node);
    void caseAExprNivelSeisExprNivelCinco(AExprNivelSeisExprNivelCinco node);
    void caseANegacaoExprNivelCinco(ANegacaoExprNivelCinco node);
    void caseAExprNivelSeteExprNivelSeis(AExprNivelSeteExprNivelSeis node);
    void caseAModExprNivelSeis(AModExprNivelSeis node);
    void caseAExprNivelOitoExprNivelSete(AExprNivelOitoExprNivelSete node);
    void caseAMultExprNivelSete(AMultExprNivelSete node);
    void caseADivExprNivelSete(ADivExprNivelSete node);
    void caseAIdentifierExprNivelOito(AIdentifierExprNivelOito node);
    void caseANRealExprNivelOito(ANRealExprNivelOito node);
    void caseAChamadaMetdExprNivelOito(AChamadaMetdExprNivelOito node);
    void caseAChamadaAtributoExprNivelOito(AChamadaAtributoExprNivelOito node);
    void caseAVerdadeExprNivelOito(AVerdadeExprNivelOito node);
    void caseAFalsoExprNivelOito(AFalsoExprNivelOito node);
    void caseAParExprNivelOito(AParExprNivelOito node);
    void caseABlocoBlocoExp(ABlocoBlocoExp node);
    void caseAChamadaMetodoChamada(AChamadaMetodoChamada node);
    void caseAIdAtributo(AIdAtributo node);
    void caseAExpressoesListaExpr(AExpressoesListaExpr node);
    void caseAListaExprs(AListaExprs node);

    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTClasse(TClasse node);
    void caseTVerdade(TVerdade node);
    void caseTFalso(TFalso node);
    void caseTSe(TSe node);
    void caseTSenao(TSenao node);
    void caseTEnquanto(TEnquanto node);
    void caseTProcedimento(TProcedimento node);
    void caseTFuncao(TFuncao node);
    void caseTTipoBool(TTipoBool node);
    void caseTTipoReal(TTipoReal node);
    void caseTHeranca(THeranca node);
    void caseTObjeto(TObjeto node);
    void caseTVariavel(TVariavel node);
    void caseTConstante(TConstante node);
    void caseTELogico(TELogico node);
    void caseTOuLogico(TOuLogico node);
    void caseTMetodoImprime(TMetodoImprime node);
    void caseTMetodoLe(TMetodoLe node);
    void caseTComentario(TComentario node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTRelacaoSymbol(TRelacaoSymbol node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTInicioProced(TInicioProced node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTVirgula(TVirgula node);
    void caseTPonto(TPonto node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTIgual(TIgual node);
    void caseTMenor(TMenor node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTNegacao(TNegacao node);
    void caseTBarra(TBarra node);
    void caseTVazio(TVazio node);
    void caseTId(TId node);
    void caseTIdClass(TIdClass node);
    void caseTNumeroReal(TNumeroReal node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}

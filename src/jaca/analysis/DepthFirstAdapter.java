/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getFamilia() != null)
        {
            node.getFamilia().apply(this);
        }
        {
            List<PDefClasse> copy = new ArrayList<PDefClasse>(node.getDefClasse());
            for(PDefClasse e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inAFamilia(AFamilia node)
    {
        defaultIn(node);
    }

    public void outAFamilia(AFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamilia(AFamilia node)
    {
        inAFamilia(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        {
            List<PListaRelacoes> copy = new ArrayList<PListaRelacoes>(node.getListaRelacoes());
            for(PListaRelacoes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAFamilia(node);
    }

    public void inARelacoesListaRelacoes(ARelacoesListaRelacoes node)
    {
        defaultIn(node);
    }

    public void outARelacoesListaRelacoes(ARelacoesListaRelacoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacoesListaRelacoes(ARelacoesListaRelacoes node)
    {
        inARelacoesListaRelacoes(node);
        if(node.getRelacaoSymbol() != null)
        {
            node.getRelacaoSymbol().apply(this);
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outARelacoesListaRelacoes(node);
    }

    public void inARelacao(ARelacao node)
    {
        defaultIn(node);
    }

    public void outARelacao(ARelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacao(ARelacao node)
    {
        inARelacao(node);
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getHeranca() != null)
        {
            node.getHeranca().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        outARelacao(node);
    }

    public void inADefClasse(ADefClasse node)
    {
        defaultIn(node);
    }

    public void outADefClasse(ADefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefClasse(ADefClasse node)
    {
        inADefClasse(node);
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getMetodos() != null)
        {
            node.getMetodos().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outADefClasse(node);
    }

    public void inADecObjAtributos(ADecObjAtributos node)
    {
        defaultIn(node);
    }

    public void outADecObjAtributos(ADecObjAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjAtributos(ADecObjAtributos node)
    {
        inADecObjAtributos(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjAtributos(node);
    }

    public void inADecVarAtributos(ADecVarAtributos node)
    {
        defaultIn(node);
    }

    public void outADecVarAtributos(ADecVarAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarAtributos(ADecVarAtributos node)
    {
        inADecVarAtributos(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarAtributos(node);
    }

    public void inADecConstAtributos(ADecConstAtributos node)
    {
        defaultIn(node);
    }

    public void outADecConstAtributos(ADecConstAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstAtributos(ADecConstAtributos node)
    {
        inADecConstAtributos(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outADecConstAtributos(node);
    }

    public void inADecProcedimentoMetodos(ADecProcedimentoMetodos node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoMetodos(ADecProcedimentoMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoMetodos(ADecProcedimentoMetodos node)
    {
        inADecProcedimentoMetodos(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcedimentoMetodos(node);
    }

    public void inADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        inADecFuncaoMetodos(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoMetodos(node);
    }

    public void inAObjDecObj(AObjDecObj node)
    {
        defaultIn(node);
    }

    public void outAObjDecObj(AObjDecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjDecObj(AObjDecObj node)
    {
        inAObjDecObj(node);
        if(node.getObjeto() != null)
        {
            node.getObjeto().apply(this);
        }
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAObjDecObj(node);
    }

    public void inAVarDecVar(AVarDecVar node)
    {
        defaultIn(node);
    }

    public void outAVarDecVar(AVarDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecVar(AVarDecVar node)
    {
        inAVarDecVar(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVarDecVar(node);
    }

    public void inAConstDecConst(AConstDecConst node)
    {
        defaultIn(node);
    }

    public void outAConstDecConst(AConstDecConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDecConst(AConstDecConst node)
    {
        inAConstDecConst(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAConstDecConst(node);
    }

    public void inAInitInicializacao(AInitInicializacao node)
    {
        defaultIn(node);
    }

    public void outAInitInicializacao(AInitInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitInicializacao(AInitInicializacao node)
    {
        inAInitInicializacao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInitInicializacao(node);
    }

    public void inATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipo(ATipoClasseTipo node)
    {
        inATipoClasseTipo(node);
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        outATipoClasseTipo(node);
    }

    public void inATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        inATipoPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimitivoTipo(node);
    }

    public void inAClasseTipoClasse(AClasseTipoClasse node)
    {
        defaultIn(node);
    }

    public void outAClasseTipoClasse(AClasseTipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasseTipoClasse(AClasseTipoClasse node)
    {
        inAClasseTipoClasse(node);
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outAClasseTipoClasse(node);
    }

    public void inARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        inARealTipoPrimitivo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outARealTipoPrimitivo(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getTipoBool() != null)
        {
            node.getTipoBool().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inAPrincipalDecProcedimento(APrincipalDecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAPrincipalDecProcedimento(APrincipalDecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrincipalDecProcedimento(APrincipalDecProcedimento node)
    {
        inAPrincipalDecProcedimento(node);
        if(node.getInicioProced() != null)
        {
            node.getInicioProced().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAPrincipalDecProcedimento(node);
    }

    public void inAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node)
    {
        defaultIn(node);
    }

    public void outAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node)
    {
        inAProcedimentoDecProcedimento(node);
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAProcedimentoDecProcedimento(node);
    }

    public void inAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node)
    {
        inAFuncaoCompletaDecFuncao(node);
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAFuncaoCompletaDecFuncao(node);
    }

    public void inAFuncaoDecFuncao(AFuncaoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDecFuncao(AFuncaoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDecFuncao(AFuncaoDecFuncao node)
    {
        inAFuncaoDecFuncao(node);
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAFuncaoDecFuncao(node);
    }

    public void inAParamsParametros(AParamsParametros node)
    {
        defaultIn(node);
    }

    public void outAParamsParametros(AParamsParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamsParametros(AParamsParametros node)
    {
        inAParamsParametros(node);
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getParametro());
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAParamsParametros(node);
    }

    public void inAListaListParam(AListaListParam node)
    {
        defaultIn(node);
    }

    public void outAListaListParam(AListaListParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListParam(AListaListParam node)
    {
        inAListaListParam(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAListaListParam(node);
    }

    public void inAParamParametro(AParamParametro node)
    {
        defaultIn(node);
    }

    public void outAParamParametro(AParamParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParametro(AParamParametro node)
    {
        inAParamParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParamParametro(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outASeComando(node);
    }

    public void inAEquantoComando(AEquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEquantoComando(AEquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquantoComando(AEquantoComando node)
    {
        inAEquantoComando(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAEquantoComando(node);
    }

    public void inAAtbrComando(AAtbrComando node)
    {
        defaultIn(node);
    }

    public void outAAtbrComando(AAtbrComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtbrComando(AAtbrComando node)
    {
        inAAtbrComando(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAtbrComando(node);
    }

    public void inAChamadaMetdComando(AChamadaMetdComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaMetdComando(AChamadaMetdComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaMetdComando(AChamadaMetdComando node)
    {
        inAChamadaMetdComando(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaMetdComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inAIniciarBlocoBloco(AIniciarBlocoBloco node)
    {
        defaultIn(node);
    }

    public void outAIniciarBlocoBloco(AIniciarBlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIniciarBlocoBloco(AIniciarBlocoBloco node)
    {
        inAIniciarBlocoBloco(node);
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PTipoDecl> copy = new ArrayList<PTipoDecl>(node.getTipoDecl());
            for(PTipoDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outAIniciarBlocoBloco(node);
    }

    public void inADecObjTipoDecl(ADecObjTipoDecl node)
    {
        defaultIn(node);
    }

    public void outADecObjTipoDecl(ADecObjTipoDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjTipoDecl(ADecObjTipoDecl node)
    {
        inADecObjTipoDecl(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjTipoDecl(node);
    }

    public void inADecVarTipoDecl(ADecVarTipoDecl node)
    {
        defaultIn(node);
    }

    public void outADecVarTipoDecl(ADecVarTipoDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarTipoDecl(ADecVarTipoDecl node)
    {
        inADecVarTipoDecl(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarTipoDecl(node);
    }

    public void inADecConstTipoDecl(ADecConstTipoDecl node)
    {
        defaultIn(node);
    }

    public void outADecConstTipoDecl(ADecConstTipoDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstTipoDecl(ADecConstTipoDecl node)
    {
        inADecConstTipoDecl(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outADecConstTipoDecl(node);
    }

    public void inAFatorExpr(AFatorExpr node)
    {
        defaultIn(node);
    }

    public void outAFatorExpr(AFatorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExpr(AFatorExpr node)
    {
        inAFatorExpr(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExpr(node);
    }

    public void inASomaExpr(ASomaExpr node)
    {
        defaultIn(node);
    }

    public void outASomaExpr(ASomaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpr(ASomaExpr node)
    {
        inASomaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASomaExpr(node);
    }

    public void inAMenosExpr(AMenosExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpr(AMenosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        inAMenosExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMenosExpr(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outADivFator(node);
    }

    public void inAModFator(AModFator node)
    {
        defaultIn(node);
    }

    public void outAModFator(AModFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFator(AModFator node)
    {
        inAModFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAModFator(node);
    }

    public void inANumeroTermo(ANumeroTermo node)
    {
        defaultIn(node);
    }

    public void outANumeroTermo(ANumeroTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTermo(ANumeroTermo node)
    {
        inANumeroTermo(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANumeroTermo(node);
    }

    public void inAParTermo(AParTermo node)
    {
        defaultIn(node);
    }

    public void outAParTermo(AParTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTermo(AParTermo node)
    {
        inAParTermo(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAParTermo(node);
    }

    public void inABlocoBlocoExp(ABlocoBlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoBlocoExp(ABlocoBlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBlocoExp(ABlocoBlocoExp node)
    {
        inABlocoBlocoExp(node);
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PDecConst> copy = new ArrayList<PDecConst>(node.getDecConst());
            for(PDecConst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outABlocoBlocoExp(node);
    }

    public void inAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        inAChamadaMetodoChamada(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getListaExpr() != null)
        {
            node.getListaExpr().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAChamadaMetodoChamada(node);
    }

    public void inAIdAtributo(AIdAtributo node)
    {
        defaultIn(node);
    }

    public void outAIdAtributo(AIdAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtributo(AIdAtributo node)
    {
        inAIdAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAtributo(node);
    }

    public void inAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        inAExpressoesListaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PExprs> copy = new ArrayList<PExprs>(node.getExprs());
            for(PExprs e : copy)
            {
                e.apply(this);
            }
        }
        outAExpressoesListaExpr(node);
    }

    public void inAListaExprs(AListaExprs node)
    {
        defaultIn(node);
    }

    public void outAListaExprs(AListaExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExprs(AListaExprs node)
    {
        inAListaExprs(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAListaExprs(node);
    }
}

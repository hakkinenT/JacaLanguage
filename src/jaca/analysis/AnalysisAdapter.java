/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEmptyFamilia(ANotEmptyFamilia node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelacoesListaRelacoes(ARelacoesListaRelacoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelacao(ARelacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefClasse(ADefClasse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecObjAtributos(ADecObjAtributos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVarAtributos(ADecVarAtributos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConstAtributos(ADecConstAtributos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedimentoMetodos(ADecProcedimentoMetodos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAObjDecObj(AObjDecObj node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDecVar(AVarDecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstDecConst(AConstDecConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitInicializacao(AInitInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClasseTipoClasse(AClasseTipoClasse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrincipalDecProcedimento(APrincipalDecProcedimento node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProcedCompletoDecProcedimento(AProcedCompletoDecProcedimento node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProcedimentoDecProcedimento(AProcedimentoDecProcedimento node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncaoCompletaDecFuncao(AFuncaoCompletaDecFuncao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncaoDecFuncao(AFuncaoDecFuncao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamsParametros(AParamsParametros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaListParam(AListaListParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamParametro(AParamParametro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComando(AComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtbrComando(AAtbrComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamadaMetdComando(AChamadaMetdComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoDois(AComandoDois node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASeSenaoComandoDois(ASeSenaoComandoDois node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIniciarBlocoBloco(AIniciarBlocoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecObjTipoDecl(ADecObjTipoDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVarTipoDecl(ADecVarTipoDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConstTipoDecl(ADecConstTipoDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelUmExpr(AExprNivelUmExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoExprExpr(ABlocoExprExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelDoisExprNivelUm(AExprNivelDoisExprNivelUm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAELogicoExprNivelUm(AELogicoExprNivelUm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuLogicoExprNivelUm(AOuLogicoExprNivelUm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelTresExprNivelDois(AExprNivelTresExprNivelDois node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIgualExprNivelDois(AIgualExprNivelDois node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelQuatroExprNivelTres(AExprNivelQuatroExprNivelTres node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorExprNivelTres(AMenorExprNivelTres node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorIgualExprNivelTres(AMenorIgualExprNivelTres node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelCincoExprNivelQuatro(AExprNivelCincoExprNivelQuatro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASomaExprNivelQuatro(ASomaExprNivelQuatro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenosExprNivelQuatro(AMenosExprNivelQuatro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelSeisExprNivelCinco(AExprNivelSeisExprNivelCinco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegacaoExprNivelCinco(ANegacaoExprNivelCinco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelSeteExprNivelSeis(AExprNivelSeteExprNivelSeis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExprNivelSeis(AModExprNivelSeis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNivelOitoExprNivelSete(AExprNivelOitoExprNivelSete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExprNivelSete(AMultExprNivelSete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExprNivelSete(ADivExprNivelSete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierExprNivelOito(AIdentifierExprNivelOito node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANRealExprNivelOito(ANRealExprNivelOito node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamadaMetdExprNivelOito(AChamadaMetdExprNivelOito node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamadaAtributoExprNivelOito(AChamadaAtributoExprNivelOito node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVerdadeExprNivelOito(AVerdadeExprNivelOito node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalsoExprNivelOito(AFalsoExprNivelOito node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParExprNivelOito(AParExprNivelOito node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoBlocoExp(ABlocoBlocoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAChamadaMetodoChamada(AChamadaMetodoChamada node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdAtributo(AIdAtributo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressoesListaExpr(AExpressoesListaExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaExprs(AListaExprs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInicio(TInicio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFim(TFim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClasse(TClasse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVerdade(TVerdade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalso(TFalso node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSe(TSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSenao(TSenao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnquanto(TEnquanto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProcedimento(TProcedimento node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFuncao(TFuncao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTipoBool(TTipoBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTipoReal(TTipoReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHeranca(THeranca node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTObjeto(TObjeto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVariavel(TVariavel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstante(TConstante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTELogico(TELogico node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOuLogico(TOuLogico node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMetodoImprime(TMetodoImprime node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMetodoLe(TMetodoLe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentario(TComentario node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioBloco(TComentarioBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRelacaoSymbol(TRelacaoSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoVirgula(TPontoVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInicioProced(TInicioProced node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParEsq(TParEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParDir(TParDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSoma(TSoma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorIgual(TMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNegacao(TNegacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarra(TBarra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdClass(TIdClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumeroReal(TNumeroReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import jaca.analysis.*;

@SuppressWarnings("nls")
public final class AIgualExprNivelDois extends PExprNivelDois
{
    private PExprNivelTres _a_;
    private TIgual _igual_;
    private PExprNivelTres _b_;

    public AIgualExprNivelDois()
    {
        // Constructor
    }

    public AIgualExprNivelDois(
        @SuppressWarnings("hiding") PExprNivelTres _a_,
        @SuppressWarnings("hiding") TIgual _igual_,
        @SuppressWarnings("hiding") PExprNivelTres _b_)
    {
        // Constructor
        setA(_a_);

        setIgual(_igual_);

        setB(_b_);

    }

    @Override
    public Object clone()
    {
        return new AIgualExprNivelDois(
            cloneNode(this._a_),
            cloneNode(this._igual_),
            cloneNode(this._b_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIgualExprNivelDois(this);
    }

    public PExprNivelTres getA()
    {
        return this._a_;
    }

    public void setA(PExprNivelTres node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public TIgual getIgual()
    {
        return this._igual_;
    }

    public void setIgual(TIgual node)
    {
        if(this._igual_ != null)
        {
            this._igual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._igual_ = node;
    }

    public PExprNivelTres getB()
    {
        return this._b_;
    }

    public void setB(PExprNivelTres node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._a_)
            + toString(this._igual_)
            + toString(this._b_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._igual_ == child)
        {
            this._igual_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._a_ == oldChild)
        {
            setA((PExprNivelTres) newChild);
            return;
        }

        if(this._igual_ == oldChild)
        {
            setIgual((TIgual) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((PExprNivelTres) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import java.util.*;
import jaca.analysis.*;

@SuppressWarnings("nls")
public final class AADefiniADefClasse extends PADefClasse
{
    private TIdClass _idClass_;
    private final LinkedList<PAAtributos> _aAtributos_ = new LinkedList<PAAtributos>();
    private final LinkedList<PAMetodos> _aMetodos_ = new LinkedList<PAMetodos>();

    public AADefiniADefClasse()
    {
        // Constructor
    }

    public AADefiniADefClasse(
        @SuppressWarnings("hiding") TIdClass _idClass_,
        @SuppressWarnings("hiding") List<?> _aAtributos_,
        @SuppressWarnings("hiding") List<?> _aMetodos_)
    {
        // Constructor
        setIdClass(_idClass_);

        setAAtributos(_aAtributos_);

        setAMetodos(_aMetodos_);

    }

    @Override
    public Object clone()
    {
        return new AADefiniADefClasse(
            cloneNode(this._idClass_),
            cloneList(this._aAtributos_),
            cloneList(this._aMetodos_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAADefiniADefClasse(this);
    }

    public TIdClass getIdClass()
    {
        return this._idClass_;
    }

    public void setIdClass(TIdClass node)
    {
        if(this._idClass_ != null)
        {
            this._idClass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idClass_ = node;
    }

    public LinkedList<PAAtributos> getAAtributos()
    {
        return this._aAtributos_;
    }

    public void setAAtributos(List<?> list)
    {
        for(PAAtributos e : this._aAtributos_)
        {
            e.parent(null);
        }
        this._aAtributos_.clear();

        for(Object obj_e : list)
        {
            PAAtributos e = (PAAtributos) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aAtributos_.add(e);
        }
    }

    public LinkedList<PAMetodos> getAMetodos()
    {
        return this._aMetodos_;
    }

    public void setAMetodos(List<?> list)
    {
        for(PAMetodos e : this._aMetodos_)
        {
            e.parent(null);
        }
        this._aMetodos_.clear();

        for(Object obj_e : list)
        {
            PAMetodos e = (PAMetodos) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aMetodos_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._idClass_)
            + toString(this._aAtributos_)
            + toString(this._aMetodos_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._idClass_ == child)
        {
            this._idClass_ = null;
            return;
        }

        if(this._aAtributos_.remove(child))
        {
            return;
        }

        if(this._aMetodos_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._idClass_ == oldChild)
        {
            setIdClass((TIdClass) newChild);
            return;
        }

        for(ListIterator<PAAtributos> i = this._aAtributos_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAAtributos) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAMetodos> i = this._aMetodos_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAMetodos) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

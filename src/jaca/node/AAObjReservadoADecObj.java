/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import jaca.analysis.*;

@SuppressWarnings("nls")
public final class AAObjReservadoADecObj extends PADecObj
{
    private TClasseReservada _classeReservada_;
    private TId _id_;

    public AAObjReservadoADecObj()
    {
        // Constructor
    }

    public AAObjReservadoADecObj(
        @SuppressWarnings("hiding") TClasseReservada _classeReservada_,
        @SuppressWarnings("hiding") TId _id_)
    {
        // Constructor
        setClasseReservada(_classeReservada_);

        setId(_id_);

    }

    @Override
    public Object clone()
    {
        return new AAObjReservadoADecObj(
            cloneNode(this._classeReservada_),
            cloneNode(this._id_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAObjReservadoADecObj(this);
    }

    public TClasseReservada getClasseReservada()
    {
        return this._classeReservada_;
    }

    public void setClasseReservada(TClasseReservada node)
    {
        if(this._classeReservada_ != null)
        {
            this._classeReservada_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classeReservada_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classeReservada_)
            + toString(this._id_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classeReservada_ == child)
        {
            this._classeReservada_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classeReservada_ == oldChild)
        {
            setClasseReservada((TClasseReservada) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

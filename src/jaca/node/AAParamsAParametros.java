/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import java.util.*;
import jaca.analysis.*;

@SuppressWarnings("nls")
public final class AAParamsAParametros extends PAParametros
{
    private PAParametro _aParametro_;
    private final LinkedList<PAParams> _aParams_ = new LinkedList<PAParams>();

    public AAParamsAParametros()
    {
        // Constructor
    }

    public AAParamsAParametros(
        @SuppressWarnings("hiding") PAParametro _aParametro_,
        @SuppressWarnings("hiding") List<?> _aParams_)
    {
        // Constructor
        setAParametro(_aParametro_);

        setAParams(_aParams_);

    }

    @Override
    public Object clone()
    {
        return new AAParamsAParametros(
            cloneNode(this._aParametro_),
            cloneList(this._aParams_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAParamsAParametros(this);
    }

    public PAParametro getAParametro()
    {
        return this._aParametro_;
    }

    public void setAParametro(PAParametro node)
    {
        if(this._aParametro_ != null)
        {
            this._aParametro_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aParametro_ = node;
    }

    public LinkedList<PAParams> getAParams()
    {
        return this._aParams_;
    }

    public void setAParams(List<?> list)
    {
        for(PAParams e : this._aParams_)
        {
            e.parent(null);
        }
        this._aParams_.clear();

        for(Object obj_e : list)
        {
            PAParams e = (PAParams) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aParams_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aParametro_)
            + toString(this._aParams_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aParametro_ == child)
        {
            this._aParametro_ = null;
            return;
        }

        if(this._aParams_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aParametro_ == oldChild)
        {
            setAParametro((PAParametro) newChild);
            return;
        }

        for(ListIterator<PAParams> i = this._aParams_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAParams) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

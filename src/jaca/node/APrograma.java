/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import java.util.*;
import jaca.analysis.*;

@SuppressWarnings("nls")
public final class APrograma extends PPrograma
{
    private final LinkedList<PFamilia> _familia_ = new LinkedList<PFamilia>();
    private final LinkedList<PDefClasse> _defClasse_ = new LinkedList<PDefClasse>();

    public APrograma()
    {
        // Constructor
    }

    public APrograma(
        @SuppressWarnings("hiding") List<?> _familia_,
        @SuppressWarnings("hiding") List<?> _defClasse_)
    {
        // Constructor
        setFamilia(_familia_);

        setDefClasse(_defClasse_);

    }

    @Override
    public Object clone()
    {
        return new APrograma(
            cloneList(this._familia_),
            cloneList(this._defClasse_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrograma(this);
    }

    public LinkedList<PFamilia> getFamilia()
    {
        return this._familia_;
    }

    public void setFamilia(List<?> list)
    {
        for(PFamilia e : this._familia_)
        {
            e.parent(null);
        }
        this._familia_.clear();

        for(Object obj_e : list)
        {
            PFamilia e = (PFamilia) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._familia_.add(e);
        }
    }

    public LinkedList<PDefClasse> getDefClasse()
    {
        return this._defClasse_;
    }

    public void setDefClasse(List<?> list)
    {
        for(PDefClasse e : this._defClasse_)
        {
            e.parent(null);
        }
        this._defClasse_.clear();

        for(Object obj_e : list)
        {
            PDefClasse e = (PDefClasse) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._defClasse_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._familia_)
            + toString(this._defClasse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._familia_.remove(child))
        {
            return;
        }

        if(this._defClasse_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PFamilia> i = this._familia_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFamilia) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PDefClasse> i = this._defClasse_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDefClasse) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

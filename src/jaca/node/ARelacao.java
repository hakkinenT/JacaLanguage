/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import jaca.analysis.*;

@SuppressWarnings("nls")
public final class ARelacao extends PRelacao
{
    private TClasse _classe_;
    private TIdClass _a_;
    private THeranca _heranca_;
    private TIdClass _b_;

    public ARelacao()
    {
        // Constructor
    }

    public ARelacao(
        @SuppressWarnings("hiding") TClasse _classe_,
        @SuppressWarnings("hiding") TIdClass _a_,
        @SuppressWarnings("hiding") THeranca _heranca_,
        @SuppressWarnings("hiding") TIdClass _b_)
    {
        // Constructor
        setClasse(_classe_);

        setA(_a_);

        setHeranca(_heranca_);

        setB(_b_);

    }

    @Override
    public Object clone()
    {
        return new ARelacao(
            cloneNode(this._classe_),
            cloneNode(this._a_),
            cloneNode(this._heranca_),
            cloneNode(this._b_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARelacao(this);
    }

    public TClasse getClasse()
    {
        return this._classe_;
    }

    public void setClasse(TClasse node)
    {
        if(this._classe_ != null)
        {
            this._classe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classe_ = node;
    }

    public TIdClass getA()
    {
        return this._a_;
    }

    public void setA(TIdClass node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public THeranca getHeranca()
    {
        return this._heranca_;
    }

    public void setHeranca(THeranca node)
    {
        if(this._heranca_ != null)
        {
            this._heranca_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._heranca_ = node;
    }

    public TIdClass getB()
    {
        return this._b_;
    }

    public void setB(TIdClass node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classe_)
            + toString(this._a_)
            + toString(this._heranca_)
            + toString(this._b_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classe_ == child)
        {
            this._classe_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._heranca_ == child)
        {
            this._heranca_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classe_ == oldChild)
        {
            setClasse((TClasse) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TIdClass) newChild);
            return;
        }

        if(this._heranca_ == oldChild)
        {
            setHeranca((THeranca) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((TIdClass) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

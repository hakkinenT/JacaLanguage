/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import java.util.*;
import jaca.analysis.*;

@SuppressWarnings("nls")
public final class AAPrograma extends PAPrograma
{
    private PAFamilia _aFamilia_;
    private final LinkedList<PADefClasse> _aDefClasse_ = new LinkedList<PADefClasse>();

    public AAPrograma()
    {
        // Constructor
    }

    public AAPrograma(
        @SuppressWarnings("hiding") PAFamilia _aFamilia_,
        @SuppressWarnings("hiding") List<?> _aDefClasse_)
    {
        // Constructor
        setAFamilia(_aFamilia_);

        setADefClasse(_aDefClasse_);

    }

    @Override
    public Object clone()
    {
        return new AAPrograma(
            cloneNode(this._aFamilia_),
            cloneList(this._aDefClasse_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAPrograma(this);
    }

    public PAFamilia getAFamilia()
    {
        return this._aFamilia_;
    }

    public void setAFamilia(PAFamilia node)
    {
        if(this._aFamilia_ != null)
        {
            this._aFamilia_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aFamilia_ = node;
    }

    public LinkedList<PADefClasse> getADefClasse()
    {
        return this._aDefClasse_;
    }

    public void setADefClasse(List<?> list)
    {
        for(PADefClasse e : this._aDefClasse_)
        {
            e.parent(null);
        }
        this._aDefClasse_.clear();

        for(Object obj_e : list)
        {
            PADefClasse e = (PADefClasse) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aDefClasse_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aFamilia_)
            + toString(this._aDefClasse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aFamilia_ == child)
        {
            this._aFamilia_ = null;
            return;
        }

        if(this._aDefClasse_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aFamilia_ == oldChild)
        {
            setAFamilia((PAFamilia) newChild);
            return;
        }

        for(ListIterator<PADefClasse> i = this._aDefClasse_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PADefClasse) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

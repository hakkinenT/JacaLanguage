/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import java.util.*;
import jaca.analysis.*;

@SuppressWarnings("nls")
public final class AANotEmptyAFamilia extends PAFamilia
{
    private PARelacao _aRelacao_;
    private final LinkedList<PAListaRelacoes> _aListaRelacoes_ = new LinkedList<PAListaRelacoes>();

    public AANotEmptyAFamilia()
    {
        // Constructor
    }

    public AANotEmptyAFamilia(
        @SuppressWarnings("hiding") PARelacao _aRelacao_,
        @SuppressWarnings("hiding") List<?> _aListaRelacoes_)
    {
        // Constructor
        setARelacao(_aRelacao_);

        setAListaRelacoes(_aListaRelacoes_);

    }

    @Override
    public Object clone()
    {
        return new AANotEmptyAFamilia(
            cloneNode(this._aRelacao_),
            cloneList(this._aListaRelacoes_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAANotEmptyAFamilia(this);
    }

    public PARelacao getARelacao()
    {
        return this._aRelacao_;
    }

    public void setARelacao(PARelacao node)
    {
        if(this._aRelacao_ != null)
        {
            this._aRelacao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aRelacao_ = node;
    }

    public LinkedList<PAListaRelacoes> getAListaRelacoes()
    {
        return this._aListaRelacoes_;
    }

    public void setAListaRelacoes(List<?> list)
    {
        for(PAListaRelacoes e : this._aListaRelacoes_)
        {
            e.parent(null);
        }
        this._aListaRelacoes_.clear();

        for(Object obj_e : list)
        {
            PAListaRelacoes e = (PAListaRelacoes) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aListaRelacoes_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aRelacao_)
            + toString(this._aListaRelacoes_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aRelacao_ == child)
        {
            this._aRelacao_ = null;
            return;
        }

        if(this._aListaRelacoes_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aRelacao_ == oldChild)
        {
            setARelacao((PARelacao) newChild);
            return;
        }

        for(ListIterator<PAListaRelacoes> i = this._aListaRelacoes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAListaRelacoes) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

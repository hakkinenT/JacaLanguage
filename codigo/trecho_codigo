Productions
 
 programa = familia* def_classe*;
 
 familia = 
 	{not_empty} relacao lista_relacoes* ponto_virgula;
 
 lista_relacoes =
 	{relacoes} relacao_symbol relacao; 
 
 relacao = classe [a]:id_class heranca [b]:id_class;
 
 def_classe = classe id_class inicio atributos metodos fim;
 
 atributos = 
 	{dec_obj} dec_obj
   |{dec_var} dec_var
   |{dec_const} dec_const;
 
 metodos = 
 	{dec_procedimento} dec_procedimento
   |{dec_funcao} dec_funcao;
 
 dec_obj = 
 	{obj} objeto tipo_classe id ponto_virgula;
 
 dec_var =
 	{var} variavel tipo_primitivo id ponto_virgula;
 	
 dec_const = 
 	{const} constante tipo_primitivo inicializacao ponto_virgula;
 
 inicializacao = 
    {init} id atribuicao expr;
  
 tipo =
 	{tipo_classe} tipo_classe
   |{tipo_primitivo} tipo_primitivo;
 
 tipo_classe = 
 	{classe} id_class;
 
 tipo_primitivo =
 	{real} tipo_real
   |{bool} tipo_bool;
   
 dec_procedimento =
 	{proced_completo} inicio_proced* procedimento id par_esq parametros par_dir comando
   |{procedimento} procedimento id par_esq parametros par_dir ponto_virgula;
 
 dec_funcao =
 	{funcao_completa} funcao tipo id par_esq parametros par_dir expr
   |{funcao} funcao tipo id par_esq parametros par_dir ponto_virgula;
 
 parametros =
   {params} parametro*;
 	
 list_param =
 	{lista} barra parametro;
 	
 parametro = 
 	{param} tipo id;
 
 comando =
    {se} se par_esq expr par_dir comando
   |{se_senao} se par_esq expr par_dir comando_dois senao comando
   |{enquanto} enquanto par_esq expr par_dir comando
   |{atbr} id atribuicao expr ponto_virgula
   |{chamada_metd} id ponto chamada ponto_virgula
   |{bloco} bloco;
   
 comando_dois =
 	{se_senao} se par_esq expr par_dir [a]:comando_dois senao [b]:comando_dois
   |{bloco} bloco;
   
 
 	
 bloco = 
 	{iniciar_bloco}inicio tipo_decl* comando* fim;
 
 tipo_decl =
 	{dec_obj} dec_obj
   |{dec_var} dec_var
   |{dec_const} dec_const;
   
 expr =
 	{expr_nivel_um} expr_nivel_um
   |{bloco_expr} bloco_exp;

 expr_nivel_um =
 	{expr_nivel_dois} expr_nivel_dois
 	|{e_logico} [a]:expr_nivel_dois e_logico [b]:expr_nivel_dois
 	|{ou_logico} [a]:expr_nivel_dois ou_logico [b]:expr_nivel_dois;
 	
  expr_nivel_dois =
 	{expr_nivel_tres} expr_nivel_tres
   |{igual} [a]:expr_nivel_tres igual [b]:expr_nivel_tres;
 	
 expr_nivel_tres =
 	{expr_nivel_quatro} expr_nivel_quatro
   |{menor} [a]:expr_nivel_quatro menor [b]:expr_nivel_quatro
   |{menor_igual} [a]:expr_nivel_quatro menor_igual [b]:expr_nivel_quatro;
    	
 expr_nivel_quatro =
 	{expr_nivel_cinco} expr_nivel_cinco
   |{soma} [a]:expr_nivel_cinco soma [b]:expr_nivel_cinco
   |{menos} [a]:expr_nivel_cinco menos [b]:expr_nivel_cinco;
   
  expr_nivel_cinco =
 	{expr_nivel_seis} expr_nivel_seis
   |{negacao} negacao expr_nivel_seis;
   
 expr_nivel_seis =
 	{expr_nivel_sete} expr_nivel_sete
   |{mod} expr_nivel_seis mod expr_nivel_sete; 
 	
 expr_nivel_sete =
 	{expr_nivel_oito} expr_nivel_oito
   |{mult} expr_nivel_sete mult expr_nivel_oito
   |{div} expr_nivel_sete div expr_nivel_oito;
   
   
 expr_nivel_oito =
 	{identifier} id
   |{n_real} numero_real
   |{chamada_metd} id ponto chamada ponto_virgula
   |{chamada_atributo} id ponto atributo ponto_virgula
   |{verdade} verdade
   |{falso} falso
   |{par} par_esq expr par_dir;
    
 bloco_exp =
 	{bloco} inicio dec_const* expr fim;
	
 chamada = 
 	{chamada_metodo} id par_esq lista_expr* par_dir;
 
 atributo =
 	{id} id;
 	
 lista_expr =
   {expressoes} expr exprs*;
 	
 exprs = 
 	{lista} barra expr;
 
 
Package jaca;

Helpers
 digito = ['0' .. '9'];
 letra = ['A' .. 'Z'] | ['a' .. 'z'];
 espaco = ' ';
 rc = 13;
 nl = 10;
 tab = 09;
 underline = '_';
 letra_acent = 'á' | 'à' | 'â' | 'ã' | 'é' | 'è' | 'ê' | 'í' | 'ì' | 'î' | 'ó' | 'ò' | 'ô' | 'õ' | 'ú' | 'ù' | 'û' | 'Á' | 'À' | 'Â' | 'Ã' | 'É' | 'È' | 'Ê' | 'Í' | 'Ì' | 'Î' | 'Ó' | 'Ò' | 'Ô' | 'Õ' | 'Ú' | 'Ù' | 'Û' | 'ç' | 'Ç';
 caractere = letra  | letra_acent;
 tudo = [0x0 .. 0xfffff];
 quase_tudo_bloco = [ tudo - '}' ];
 quase_tudo_linha = [ tudo - nl ];
 
Tokens
 /* reservadas */
 
 inicio = 'inicio';
 fim = 'fim';
 classe = 'classe';
 verdade = 'verdade';
 falso = 'falso';
 se = 'se';
 senao = 'senão';
 enquanto = 'enquanto';
 procedimento = 'procedimento';
 funcao = 'funcao';
 tipo_bool = 'bool';
 tipo_real = 'real';
 heranca = 'filha da classe';
 objeto = 'objeto';
 variavel = 'var';
 constante = 'const';
 e_logico = 'e';
 ou_logico = 'ou';
 metodo_imprime = '.imprime';
 metodo_le = '.lê';
 comentario = '#'(quase_tudo_linha)*;
 comentario_bloco = '{'(quase_tudo_bloco)*'}';
 
 /*Simbolos*/
 
 relacao_symbol = '&';
 ponto_virgula = ';';
 atribuicao = ':=';
 inicio_proced = '>>>';
 par_esq = '(';
 par_dir = ')';
 virgula = ',';
 ponto = '.';
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 igual = '==';
 menor = '<';
 menor_igual = '<=';
 negacao = '!';
 
 vazio = (espaco | rc | nl | tab)+;
 id = caractere(caractere | underline)*;
 id_class = underline(caractere | underline)*;
 numero_real = digito+ | digito+(',')(digito)+ | digito+('E'| 'e')('-')(digito)+;
 
 
 Ignored Tokens
  comentario,
  comentario_bloco,
  vazio;
  
 Productions
 /*
 programa = familia def_classe*;
 
 familia = relacao lista_relacoes* ponto_virgula;
 
 lista_relacoes =
 	{relacoes} relacao_symbol relacao; 
 
 relacao = classe [a]:id_class heranca [b]:id_class;
 
 def_classe = classe id_class inicio atributos metodos fim;
 
 atributos = 
 	{dec_obj} dec_obj
   |{dec_var} dec_var
   |{dec_const} dec_const;
 
 metodos = 
 	{dec_procedimento} dec_procedimento
   |{dec_funcao} dec_funcao;
 
 dec_obj = 
 	{obj} objeto tipo_classe id ponto_virgula;
 
 dec_var =
 	{var} variavel tipo_primitivo id ponto_virgula;
 	
 dec_const = 
 	{const} constante tipo_primitivo inicializacao ponto_virgula;
 
 inicializacao = 
    {init} id atribuicao expr;
  
 tipo =
 	{tipo_classe} tipo_classe
   |{tipo_primitivo} tipo_primitivo;
 
 tipo_classe = 
 	{classe} id_class;
 
 tipo_primitivo =
 	{real} tipo_real
   |{bool} tipo_bool;
   
 dec_procedimento =
 	{principal} inicio_proced procedimento id par_esq parametros par_dir comando
   |{procedimento} procedimento id par_esq parametros par_dir ponto_virgula;
 
 dec_funcao =
 	{funcao_completa} funcao tipo id par_esq parametros par_dir expr
   |{funcao} funcao tipo id par_esq parametros par_dir ponto_virgula;
 
 parametros =
 	{params} parametro*;
 	
 list_param =
 	{lista} virgula parametro;
 	
 parametro = 
 	{param} tipo id;
 
 comando =
 	{se} se par_esq expr par_dir comando
   |{equanto} par_esq expr par_dir comando
   |{atbr} id atribuicao expr
   |{chamada_metd} id ponto chamada
   |{bloco} bloco;
 
 bloco = 
 	{iniciar_bloco}inicio tipo_decl* comando* fim;
 
 tipo_decl =
 	{dec_obj} dec_obj
   |{dec_var} dec_var
   |{dec_const} dec_const;
 */
 expr =
 	{expr_relacional} expr_relacional
   |{menos} menos expr
   |{chamada_atrb} id ponto atributo ponto_virgula
   |{chamada_metd} id ponto chamada ponto_virgula
   |{e_logico} expr e_logico expr_relacional
   |{ou_logico} expr ou_logico expr_relacional;
  
 	
 expr_relacional =
 	{expr_aritm} expr_aritm
   |{menor_que} expr_relacional menor expr_aritm
   |{menor_igual} expr_relacional menor_igual expr_aritm
   |{igual} expr_relacional igual expr_aritm;
   
 
 expr_aritm = 
 	{fator} fator
   |{soma} expr_aritm soma fator
   |{subt} expr_aritm menos fator;
   
   
 fator =
 	{termo} termo
   |{mult} fator mult termo
   |{div} fator div termo
   |{mod} fator mod termo;
   	
 termo =
 	{valor_real} numero_real
   |{par} par_esq expr par_dir
   |{negacao} negacao expr;
   
 valor_bool =
    {verdade} verdade
   |{falso} falso;
 /*  
 bloco_exp =
 	{bloco} inicio dec_const* expr fim;
 */	
 chamada = 
 	{chamada_metodo} id par_esq lista_expr par_dir;
 
 atributo =
 	{id} id;
 	
 lista_expr =
 	{expressoes} expr exprs*;
 	
 exprs = 
 	{lista} virgula expr;
 
Package jaca;

Helpers
 digito = ['0' .. '9'];
 letra = ['A' .. 'Z'] | ['a' .. 'z'];
 espaco = ' ';
 rc = 13;
 nl = 10;
 tab = 09;
 underline = '_';
 letra_acent = 'б' | 'а' | 'в' | 'г' | 'й' | 'к' | 'и' | 'н' | 'м' | 'о' | 'у' | 'т' | 'ф' | 'х' | 'ъ' | 'щ' | 'ы' | 'Б' |'А' | 'Г' | 'В' |'Й' | 'И' | 'К' | 'Н' | 'М' | 'О' | 'Ф' | 'Т' | 'У' | 'Х' | 'Ъ' | 'Щ' | 'Ы' | 'З' | 'з';
 caractere = letra  | letra_acent;
 tudo = [0x0 .. 0xfffff];
 quase_tudo_bloco = [ tudo - '}' ];
 quase_tudo_linha = [ tudo - nl ];
 
Tokens
 /* reservadas */
 
 inicio = 'inнcio';
 fim = 'fim';
 classe = 'classe';
 verdade = 'verdade';
 falso = 'falso';
 se = 'se';
 senao = 'senгo';
 enquanto = 'enquanto';
 procedimento = 'procedimento';
 funcao = 'funзгo';
 tipo_bool = 'bool';
 tipo_real = 'real';
 heranca = 'filha da classe';
 objeto = 'objeto';
 variavel = 'var';
 constante = 'const';
 e_logico = 'e';
 ou_logico = 'ou';
 classe_reservada ='_ES';
 metodo_imprime = 'imprime';
 metodo_le = 'lк';
 comentario = '#'(quase_tudo_linha)*;
 comentario_bloco = '{'(quase_tudo_bloco)*'}';
 
 /*Simbolos*/
 
 relacao_symbol = '&';
 ponto_virgula = ';';
 atribuicao = ':=';
 inicio_proced = '>>>';
 par_esq = '(';
 par_dir = ')';
 virgula = ',';
 ponto = '.';
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 igual = '==';
 menor = '<';
 menor_igual = '<=';
 negacao = '!';
 barra = '|';
 
 vazio = (espaco | rc | nl | tab)+;
 id = caractere(caractere | underline)*;
 id_class = underline(caractere | underline)*;
 numero_real = digito+ | digito+(',')(digito)+ | digito+('E'| 'e')('-')?(digito)+;
 
 
 Ignored Tokens
  comentario,
  comentario_bloco,
  vazio;
  
Productions
 
 programa {-> a_programa} = familia? def_classe* {-> New a_programa(familia.a_familia, [def_classe.a_def_classe])}
 ;
 
 familia {-> a_familia}=
 	{not_empty} relacao lista_relacoes* ponto_virgula {-> New a_familia.a_not_empty(relacao.a_relacao, [lista_relacoes.a_lista_relacoes])}
 ;
 
 lista_relacoes {-> a_lista_relacoes} =
 	{relacoes} relacao_symbol relacao {-> New a_lista_relacoes.a_relacoes(relacao.a_relacao)}
 ; 
 
 relacao {-> a_relacao} = 
 	{rel} classe [esq]:id_class heranca [dir]:id_class {-> New a_relacao.a_rel(esq, dir)}
 ;
 
 def_classe {-> a_def_classe} = 
 	{defini} classe id_class inicio atributos* metodos fim {-> New a_def_classe.a_defini(id_class, [atributos.a_atributos], [metodos.a_metodos])}
 ;
 
 metodos {-> a_metodos} = 
 	proc_func* {-> New a_metodos.a_proc_func([proc_func.a_proc_func])}
 ;
   
 proc_func {-> a_proc_func} =
 	{dec_procedimento} dec_procedimento {-> New a_proc_func.a_dec_procedimento(dec_procedimento.a_dec_procedimento)}
   |{dec_funcao} dec_funcao {-> New a_proc_func.a_dec_funcao(dec_funcao.a_dec_funcao)}
  ;
   
 dec_obj {-> a_dec_obj} = 
 	{obj} objeto tipo_classe id ponto_virgula {-> New a_dec_obj.a_obj(tipo_classe.a_tipo_classe, id)}
 	|{obj_reservado} objeto classe_reservada id ponto_virgula {-> New a_dec_obj.a_obj_reservado(classe_reservada, id)}
 ;
 
 dec_var {-> a_dec_var} =
 	{var} variavel tipo_primitivo id ponto_virgula {-> New a_dec_var.a_var(tipo_primitivo.a_tipo_primitivo, id)}
 ;
 	
 dec_const {-> a_dec_const} = 
 	{const} constante tipo_primitivo inicializacao ponto_virgula {-> New a_dec_const.a_const(tipo_primitivo.a_tipo_primitivo)}
 ;
 
 inicializacao {-> a_inicializacao} = 
    {init} id atribuicao expr {-> New a_inicializacao.a_init(id, expr.a_expr)}
   ;
  
 tipo {-> a_tipo} =
 	{tipo_classe} tipo_classe {-> tipo_classe.a_tipo_classe}
   |{tipo_primitivo} tipo_primitivo {-> tipo_primitivo.a_tipo_primitivo}
  ;
 
 tipo_classe {-> a_tipo_classe} = 
 	{classe} id_class {-> New a_tipo_classe.a_classe(id_class)}
 ;
 
 tipo_primitivo {-> a_tipo_primitivo}=
 	{real} tipo_real {-> New a_tipo_primitivo.a_real(tipo_real)}
   |{bool} tipo_bool {-> New a_tipo_primitivo.a_bool(tipo_bool)}
  ;
   
 dec_procedimento {-> a_dec_procedimento} =
 	{proced_completo} inicio_proced? procedimento id par_esq parametros? par_dir comando {-> New a_dec_procedimento.a_proced_completo(id, parametros.a_parametros, comando.a_comando)}
   |{procedimento} procedimento id par_esq parametros? par_dir ponto_virgula {-> New a_dec_procedimento.a_procedimento(id, parametros.a_parametros)}
   ;
 
 dec_funcao {-> a_dec_funcao } =
 	{funcao_completa} funcao tipo id par_esq parametros? par_dir expr {-> New a_dec_funcao.a_funcao_completa(tipo.a_tipo, id, parametros.a_parametros, expr.a_expr )}
   |{funcao} funcao tipo id par_esq parametros? par_dir ponto_virgula {-> New a_dec_funcao.a_funcao(tipo.a_tipo, id, parametros.a_parametros)};
 
 parametros {-> a_parametros} =
   {params} parametro params* {-> New a_parametros.a_params(parametro.a_parametro, [params.a_params])};
	
 params {-> a_params} =
 	{lista} barra parametro {-> New a_params.a_lista(parametro.a_parametro)}
 ;
 	
 parametro {-> a_parametro} = 
 	{param} tipo id {-> New a_parametro.a_param(tipo.a_tipo, id)}
 ;
 
 comando {-> a_comando}=
    {se} se par_esq expr_inversora par_dir comando {-> New a_comando.a_se(expr_inversora.a_expr_inversora, comando.a_comando)}
   |{se_senao} se par_esq expr_inversora par_dir comando_dois senao comando {-> New a_comando.a_se_senao(expr_inversora.a_expr_inversora, comando_dois.a_comando_dois,comando.a_comando)}
   |{enquanto} enquanto par_esq expr_inversora par_dir comando {-> New a_comando.a_enquanto(expr_inversora.a_expr_inversora, comando.a_comando)}
   |{atbr} id atribuicao expr_inversora ponto_virgula {-> New a_comando.a_atbr(id, expr_inversora.a_expr_inversora)}
   |{chamada_metd} id ponto chamada ponto_virgula {-> New a_comando.a_chamada_metd(id, chamada.a_chamada)}
   |{bloco} bloco {-> New a_comando.a_bloco(bloco.a_bloco)};
   
 comando_dois {-> a_comando_dois}=
 	{se_senao} se par_esq expr par_dir [esq]:comando_dois senao [dir]:comando_dois {-> New a_comando_dois.a_se_senao(expr.a_expr, esq.a_comando_dois,dir.a_comando_dois)}
   |{bloco} bloco {-> New a_comando_dois.a_bloco(bloco.a_bloco)};
   	
 bloco {-> a_bloco} = 
 	{iniciar_bloco}inicio atributos* comando* fim {-> New a_bloco.a_iniciar_bloco([atributos.a_atributos], [comando.a_comando])}
 ;
 
 atributos {-> a_atributos} =
 	{dec_obj} dec_obj {-> dec_obj.a_dec_obj}
   |{dec_var} dec_var {-> dec_var.a_dec_var}
   |{dec_const} dec_const {-> dec_const.a_dec_const};
 
 
 expr_inversora {-> a_expr_inversora} =
 	{expr} expr {-> expr.a_expr}
 	|{inversor} menos expr {-> expr.a_expr};

 	
expr {-> a_expr} =
 	{expr_nivel_um} expr_nivel_um {-> expr_nivel_um.a_expr}
   |{bloco_exp} bloco_exp {-> New a_expr.a_bloco_exp(expr.a_expr)};

 expr_nivel_um {-> a_expr} =
 	{expr_nivel_dois} expr_nivel_dois {-> expr_nivel_dois.a_expr}
 	|{e_logico} [a]:expr_nivel_dois e_logico [b]:expr_nivel_dois {-> New a_expr.a_e_logico(esq.a_expr, dir.a_expr)}
 	|{ou_logico} [a]:expr_nivel_dois ou_logico [b]:expr_nivel_dois {-> New a_expr.a_ou_logico(esq.a_expr, dir.a_expr)};
 	
  expr_nivel_dois {-> a_expr} =
 	{expr_nivel_tres} expr_nivel_tres {-> expr_nivel_tres.a_expr}
   |{igual} [a]:expr_nivel_tres igual [b]:expr_nivel_tres {-> New a_expr.a_igual(esq.a_expr, dir.a_expr)};
 	
 expr_nivel_tres {-> a_expr} =
 	{expr_nivel_quatro} expr_nivel_quatro {-> expr_nivel_quatro.a_expr}
   |{menor} [a]:expr_nivel_quatro menor [b]:expr_nivel_quatro {-> New a_expr.a_menor(esq.a_expr, dir.a_expr)}
   |{menor_igual} [a]:expr_nivel_quatro menor_igual [b]:expr_nivel_quatro {-> New a_expr.a_menor_igual(esq.a_expr, dir.a_expr)};
    	
 expr_nivel_quatro {-> a_expr} =
 	{expr_nivel_cinco} expr_nivel_cinco {-> expr_nivel_cinco.a_expr}
   |{soma} [a]:expr_nivel_cinco soma [b]:expr_nivel_cinco {-> New a_expr.a_soma(esq.a_expr, dir.a_expr)}
   |{menos} [a]:expr_nivel_cinco menos [b]:expr_nivel_cinco {-> New a_expr.a_menos(esq.a_expr, dir.a_expr)};
   
  expr_nivel_cinco {-> a_expr} =
 	{expr_nivel_seis} expr_nivel_seis {-> expr_nivel_seis.a_expr}
   |{negacao} negacao expr_nivel_seis;
   
 expr_nivel_seis {-> a_expr} =
 	{expr_nivel_sete} expr_nivel_sete {-> expr_nivel_sete.a_expr}
   |{mod} expr_nivel_seis mod expr_nivel_sete {-> New a_expr.a_mod(esq.a_expr, dir.a_expr)}; 
 	
 expr_nivel_sete {-> a_expr} =
 	{expr_nivel_oito} expr_nivel_oito {-> expr_nivel_oito.a_expr}
   |{mult} expr_nivel_sete mult expr_nivel_oito {-> New a_expr.a_mult(esq.a_expr, dir.a_expr)}
   |{div} expr_nivel_sete div expr_nivel_oito {-> New a_expr.a_div(esq.a_expr, dir.a_expr)};
   
   
 expr_nivel_oito {-> a_expr}=
 	{identifier} id {-> New a_expr.a_identifier(id)}
   |{n_real} numero_real {-> New a_expr.a_n_real(numero_real)}
   |{chamada_metd} id ponto chamada ponto_virgula {-> New a_expr.a_chamada_metd(id, chamada)}
   |{chamada_atributo} id ponto atributo ponto_virgula {-> New a_expr.a_chamada_metd(esq.id, dir.id)}
   |{verdade} verdade {-> New a_expr.a_verdade(verdade)}
   |{falso} falso {-> New a_expr.a_falso(falso)}
   |{par} par_esq expr par_dir {-> expr.a_expr};
    
    
 bloco_exp {-> a_bloco_exp}=
 	{bloco} inicio dec_const* expr fim {-> New a_bloco_expr.a_bloco([dec_const.a_dec_const], expr.a_expr)};
	
 chamada {-> a_chamada}= 
 	{chamada_metodo} id par_esq lista_expr* par_dir {-> New a_chamada.a_chamada_metodo(id, [lista_expr.a_lista_expr])}
 	|{reservado_le}   metodo_le par_esq lista_expr* par_dir {-> New a_chamada.a_reservado_le([lista_expr.a_lista_expr])}
 	|{reservado_imprime} metodo_imprime par_esq lista_expr* par_dir {-> New a_chamada.a_reservado_imprime([lista_expr.a_lista_expr])}
 	;
 	
 atributo {-> a_atributo} =
 	{id} id {-> New a_atributo.a_id(id)};
 	
 lista_expr {-> a_lista_expr}=
   {expressoes} expr exprs* {-> New a_lista_expr.a_expressoes(expr.a_expr, [exprs.a_exprs])}
  ;
 	
 exprs {-> a_exprs}= 
 	{lista} barra expr {-> expr.a_expr};
 	
 
 
 
  Abstract Syntax Tree
  
 
 a_programa = a_familia? a_def_classe*;

 a_familia = 
	{a_not_empty} a_relacao a_lista_relacoes*;

 a_lista_relacoes =
	{a_relacoes} a_relacao;
	
 a_relacao = 
	{a_rel} [esq]:id_class [dir]:id_class;

 a_def_classe =
	{a_defini} id_class a_atributos* a_metodos*;

 a_metodos =
	{a_proc_func} a_proc_func*;

 a_proc_func =
	{a_dec_procedimento} a_dec_procedimento
	|{a_dec_funcao} a_dec_funcao;
	
 a_dec_obj =
	{a_obj} a_tipo_classe id
	|{a_obj_reservado} classe_reservada id;
	
 a_dec_var =
	{a_var} a_tipo_primitivo id;
	
 a_dec_const =
	{a_const} a_tipo_primitivo;
	
 a_inicializacao =
	{a_init} id a_expr;
	
 a_tipo =
	{a_tipo_classe} a_tipo
	|{a_tipo_prmitivo} a_tipo;
	
 a_tipo_classe =
	{a_classe} id_class;
	
 a_tipo_primitivo =
	{a_real} tipo_real
	|{a_bool} tipo_bool;

 a_dec_procedimento =
	{a_proced_completo} id a_parametros? a_comando
	|{a_procedimento} id a_parametros?;

 a_dec_funcao =
	{a_funcao_completa} a_tipo id a_parametros? a_expr
	|{a_funcao} a_tipo id a_parametros?;


 a_parametros =
	{a_params} a_parametro a_params*;
	
 a_params =
	{a_lista} a_parametro;
	
 a_parametro =
 	{a_param} a_tipo id;

 a_comando =
	{a_se} a_expr_inversora a_comando
	|{a_se_senao} a_expr_inversora a_comando_dois a_comando
	|{a_enquanto} a_expr_inversora a_comando
	|{a_atbr} id a_expr_inversora
	|{a_chamada_metd} id a_chamada
	|{a_bloco} a_bloco;
	
 a_comando_dois =
	{a_se_senao} a_expr [esq]:a_comando_dois [dir]:a_comando_dois
	|{a_bloco} a_bloco;

 a_bloco =
	{a_iniciar_bloco} a_atributos* a_comando*;
	
 a_atributos =
	{a_dec_obj} a_dec_obj
	|{a_dec_var} a_dec_var
	|{a_dec_const} a_dec_const;

 a_expr_inversora =
	{a_expr} a_expr
	|{a_inversor} a_expr;

 a_expr = 
	{a_identifier} id
	|{a_n_real} numero_real
	|{a_verdade} verdade
	|{a_falso} falso
	|{a_chamada_atributo} [esq]:id [dir]:id
	|{a_chamada_metd} id a_chamada
	|{a_soma} [esq]:a_expr [dir]:a_expr
	|{a_menos} [esq]:a_expr [dir]:a_expr
	|{a_mult} [esq]:a_expr [dir]:a_expr
	|{a_div} [esq]:a_expr [dir]:a_expr
	|{a_mod} [esq]:a_expr [dir]:a_expr
	|{a_igual} [esq]:a_expr [dir]:a_expr
	|{a_e_logico} [esq]:a_expr [dir]:a_expr
	|{a_ou_logico} [esq]:a_expr [dir]:a_expr
	|{a_menor} [esq]:a_expr [dir]:a_expr
	|{a_menor_igual} [esq]:a_expr [dir]:a_expr
	|{a_bloco_exp} a_bloco_exp;
	
 a_bloco_exp =
	{a_bloco} a_dec_const* a_expr;

 a_chamada =
	{a_chamada_metodo} id a_lista_expr*
	|{a_reservado_le} a_lista_expr*
	|{a_reservado_imprime} a_lista_expr*; 	
	
 a_atributo = 
	{a_id} id;
	
 a_lista_expr =
	{a_expressoes} a_expr a_exprs*;

 a_exprs = 
	{a_lista} a_expr;
 	
 
 	